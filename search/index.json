[{"content":"markdown 笔记 锚点\n标题 # 一级标题\u0026lt;h1\u0026gt; ## 二级标题\u0026lt;h2\u0026gt; ### 三级标题\u0026lt;h3\u0026gt; #### 四级标题\u0026lt;h4\u0026gt; ##### 五级标题\u0026lt;h5\u0026gt; 强调 *斜体的文字* _斜体的文字_ 斜体的文字\n**粗体的文字** __粗体的文字__ 粗体的文字\n***加粗斜体的文字*** 加粗斜体的文字\n~~删除线的文字~~ 删除线的文字\n这些~~符号~~*可以***组合** 这些符号可以组合\n超链接 Markdown 支持两种形式的链接语法： 行内式和参考式两种形式，行内式一般使用较多。\n行内式 [链接文字](链接地址 \u0026#34;title可选\u0026#34;) 例:\n[GitHub](http://github.com) [GitHub](http://github.com \u0026#34;这就是个提示\u0026#34;) 例: GitHub GitHub\n（ps:段首加空格，shift+space切换到全角，直接加空格）\n参考式  参考式多用在学术论文上，或者在文章中多处使用相同链接。\n [链接文字][链接标记] [链接标记]:链接地址 \u0026#34;链接标题\u0026#34; `任意地方添加` 如果链接文字可以当链接标记:\n[链接文字][] [链接文字]: 链接文字 链接文字\n例:[Github][1]、[Google][2]、[知乎][]是我经常去的网站。 [1]: http://github.com [2]: http://www.google.com [知乎]: https://www.zhihu.com/ 例:Github、Google、知乎是我经常去的网站。\n自动短链接 \u0026lt;http://example.com/\u0026gt; \u0026lt;address@example.com\u0026gt; http://example.com/\naddress@example.com\n锚点 网页中，锚点其实就是页内超链接，也就是链接本文档内部的某些元素，实现当前页面中的跳转。\n\u0026lt;span id=\u0026#34;jump\u0026gt;锚点\u0026lt;/span\u0026gt; [文字](#jump) 例：跳转到开头 (ps: windows要按住ctrl, mac要按主cmd)\n列表 无序列表 * 无序列表一 * 无序列表二 * 无序列表三 - 无序列表一 - 无序列表二 - 无序列表三 + 无序列表一 + 无序列表二 + 无序列表三  无序列表一 无序列表二 无序列表三   无序列表一 无序列表二 无序列表三   无序列表一 无序列表二 无序列表三  有序列表 1. 有序列表一 2. 有序列表二 3. 有序列表三  (ps:注意符号后面有空格)\n  有序列表项 一\n  有序列表项 二\n  有序列表项 三\n  定义型列表 定义型列表由名词和解释组成。一行写上定义，紧跟一行写上解释。解释的写法冒号紧跟一个缩进(Tab)  Markdown 轻量级文本标记语言，可以转换成html，pdf等格式  列表缩进 * 轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。 那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。 软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！ 那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。 * 寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。 但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！ 悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。   轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。\n那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。\n软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！\n  那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。\n寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。\n但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！\n悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。\n  包含引用的列表 * 阅读的方法 \u0026gt; 静下心 \u0026gt; 打开书本    阅读的方法\n 静下心 打开书本\n   引用 \u0026gt; 引用的内容  引用的内容\n 引用的多层嵌套 \u0026gt; 第一层 \u0026gt; \u0026gt; 第二层 \u0026gt; \u0026gt; \u0026gt; 第三层  第一层\n 第二层\n 第三层\n   引用块内的其他语法 引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等。\n let a = null 加粗\n 插入图片 行内式 ![alt](url) ps: 为了让图片左对齐, 在前面加一个空格即可  图片alt \n参考式 ![alt][标记] [标记]: 图片地址 \u0026#34;Title\u0026#34;  猫 \n目录 直接在文章头部加[TOP] ps:部分编辑器支持,部分不支持 脚注 添加脚注的地方[^1] [^1]: 脚注的内容 ps: 脚注和脚注之间应该空一行 添加脚注的地方1\n表格 |学号|姓名|分数| |-|-|-| |小明|男|75| |小红|女|79| |小陆|男|92|    学号 姓名 分数     小明 男 75   小红 女 79   小陆 男 92    省略写法 学号|姓名|分数 -|-|- 小明|男|75 小红|女|79 小陆|男|92    学号 姓名 分数     小明 男 75   小红 女 79   小陆 男 92    对齐 学号|姓名|分数 :-|:-:|-: 小明|男|75 小红|女|79 小陆|男|92 ps: 第一列左对齐, 第二列居中, 第三列右对齐    学号 姓名 分数     小明 男 75   小红 女 79   小陆 男 92    分隔线 *** --- ___    代码 行内式 `代码` test\n代码块 ​```js let a = 1 ​``` let a = 1 可展开的代码块 \u0026lt;details\u0026gt; \u0026lt;summary\u0026gt;CLICK ME\u0026lt;/summary\u0026gt; \u0026lt;pre\u0026gt;\u0026lt;code\u0026gt;let a = 0 return a \u0026lt;/code\u0026gt;\u0026lt;/pre\u0026gt; \u0026lt;/details\u0026gt;  CLICK ME let a = 0 return a   HTML 在代码区块里面，\u0026amp;、\u0026lt;和\u0026gt;会自动转成HTML实体 HTML原始码，只需要复制贴上，剩下的Markdown都会帮你处理 \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;1\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;2\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;3\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;4\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;5\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;6\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt;   1 2 3   4 5 6     脚注的内容 \u0026#x21a9;\u0026#xfe0e;\n   ","date":"2021-12-30T00:00:00Z","permalink":"/p/markdown-note/","title":"Markdown笔记"},{"content":" 登录Nextlify，用github账号授权登陆即可。 选择 “New site from Git”——“Github”——选择自己hugo博客源码对应的仓库——自动部署。 注：可以选择私人仓库，并且public可以配置.gitignore不用上传。  遇到的报错：\nProduction: master@HEAD Failed failed during stage 'building site': Build script returned non-zero exit code: 255 遇事不觉谷人希，stackoverflow上找到类似答案，需要修改Netlify控制台的环境变量与实际Hugo版本一致。  官方说明\n技术问题千万别用百度，垃圾csdn。\n“setting”——“Build\u0026amp;deploy”——“Environment”——\u0026quot;Environment variables\u0026quot;——“Edit variables”，左边填“HUGO_VERSION”，右边填“v0.65.3”。\n注：版本号以实际hugo version获取为准。\n同时搜索到另一种解决方法，但未实际验证。  在网站根目录下新建netlify.toml的文件。\n[build] publish = \u0026#34;public\u0026#34; command = \u0026#34;hugo --gc --minify\u0026#34; [context.production.environment] HUGO_VERSION = \u0026#34;0.65.3\u0026#34; HUGO_ENV = \u0026#34;production\u0026#34; HUGO_ENABLEGITINFO = \u0026#34;true\u0026#34; [context.split1] command = \u0026#34;hugo --gc --minify --enableGitInfo\u0026#34; [context.split1.environment] HUGO_VERSION = \u0026#34;0.65.3\u0026#34; HUGO_ENV = \u0026#34;production\u0026#34; [context.deploy-preview] command = \u0026#34;hugo --gc --minify --buildFuture -b $DEPLOY_PRIME_URL\u0026#34; [context.deploy-preview.environment] HUGO_VERSION = \u0026#34;0.65.3\u0026#34; [context.branch-deploy] command = \u0026#34;hugo --gc --minify -b $DEPLOY_PRIME_URL\u0026#34; [context.branch-deploy.environment] HUGO_VERSION = \u0026#34;0.65.3\u0026#34; [context.next.environment] HUGO_ENABLEGITINFO = \u0026#34;true\u0026#34; ","date":"2020-02-28T00:00:00Z","permalink":"/p/netlify-and-hugo/","title":"使用netlify部署hugo注意事项"},{"content":"​ 在切换Hexo到Hugo的过程中，由于有很多误操作造成提交记录很难看，需要清空历史提交记录。\n  切换到新的分支。\ngit checkout --orphan latest_branch   缓存所有的文件（除了.gitignore中声明排除的）\ngit add -A   提交跟踪过的文件。\ngit commit -m \u0026#34;提交记录\u0026#34;   删除master分支。\ngit branch -D master   重命名当前分支为master。\ngit branch -m master   提交到远程master分支。\ngit push -f origin master   ","date":"2020-02-27T00:00:00Z","permalink":"/p/delete-all-gitcommit/","title":"git删除所有历史提交记录"},{"content":"参考方法:https://blog.csdn.net/weixin_41741743/article/details/82814954\n教训:学习编程不要用中文版\n一: windows→preferences→java→editor→content assist→advanced→勾选Java Prolosals→选中Template Proposals→保存退出\n注意:发现重新打开会有丢失这一配置现象.\n二: windows→preferences→java→editor→content assist→Auto activation delay(ms)设置200→Auto activation triggers for Java设置.ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghigklmnopqrstuvwxya(注意前面的点不要丢)→保存退出\n三: windows →preferences→General→keys→Content asist→word completion快捷键删掉→Binding项改为“ALT+/”→When项选择成Editing Text→保存退出\n","date":"2019-12-21T00:00:00Z","permalink":"/p/eclipse-error/","title":"解决eclipse未自动补全问题的记录"},{"content":" 通过git int把目录变成Git可以管理的仓库。 所有的版本管理系统，其实只能跟踪文本文件的改动，比如txt、网页、程序代码等。 强烈建议使用标准的utf-8编码，不要用windows自带的记事本编辑任何文本，要用utf-8 without BOM。  一.创建版本库 1.1.创建空目录 mkdir 目录名 //新建目录 cd 目录名 pwd //显示当前目录路径 1.2.把目录变成Git可以管理的仓库 git init 会看到该目录下生成.git的目录\n1.3.把文件添加到仓库 git add \u0026lt;file\u0026gt; 可反复多次使用，添加多个文件\n1.4.把文件提交到仓库 git commit -m \u0026#34;xxx\u0026#34; -m \u0026ldquo;xxx\u0026quot;本次提交的说明，commit可以一次提交很多文件。\n二.时空穿梭   查看仓库当前状态\ngit status\n  查看具体修改内容\ngit diff 要查看的文件\n  diff就是difference的缩写。\n2.1.版本回退 2.1.1.命令查看提交日志 git log 退出按 Q 觉得输出信息太多，可以加参数\ngit log --pretty=oneline 一大串xxxxxxxxxxx是commin id（版本号）。HEAD是当前版本；HEAD^是上一版本；HEAD^^是上上版本；上100版本，用HEAD~100。 查看文件版本\ncat 文件 2.1.2.版本回退 用git reset\ngit reset --hard HEAD^ 回退到上一版本。同时会修改工作区的文件。\n2.1.3取消版本回退 如果命令窗口还没关闭，往回拉，找到commit_id版本号：\ngit reset --hard 版本号的前几位 如果命令窗口已经关了，查看命令历史，找到版本号：\ngit reflog （ps：git base 按两下tab会有命令提示）\n2.2.工作区、暂存区和master分支  \n \n一旦提交后，如果你又没有对工作区做任何修改，那么工作区就是“干净”的：\n$ git status # On branch master nothing to commit (working directory clean)  git diff HEAD -- 文件名 //注意：在 -- 前面和后面都有空格。 可以查看工作区和版本库最新版的区别。\n2.3.撤销修改 2.3.1.工作区 git checkout -- file 暂存区已提交，就回到暂存区状态；未提交暂存区，就回到版本库的状态。 其中--很重要。\n2.3.2.暂存区 把暂存区撤销，放回工作区\ngit reset HEAD file 然后把工作区撤销\ngit checkout -- file 2.4.删除文件 删除本地文件\nrm file 删除版本库文件，并且提交\ngit rm file git commit -m \u0026#34;xxx\u0026#34; 如果是删错了，恢复到版本库\ngit checkout -- file git checkout实际上是用版本库替换工作区，无论是修改还是删除，都可以还原。\n三.远程仓库   创建ssh key\nssh-keygen -t rsa -C \u0026ldquo;youremail@example.com\u0026rdquo;\n  测试ssh\nssh -T git@github.com 3.1.添加远程库   关联本地仓库\ngit remote add origin git@github.com:example/example\n  如果报错\nfatal：remote origin already exists 只要先删除，再添加：\n$ git remote rm origin 添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。\n  把本地库的所有内容推送到远程库上：\ngit push -u origin master\n  把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。\n由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。\n从现在起，只要本地作了提交，就可以通过命令：\ngit push origin master 3.2.从远程库克隆\ngit clone git@github.com:example/example 四.分支管理 4.1.创建与合并分支 通过指针的变化\n \n  首先，我们创建dev分支，然后切换到dev分支：\ngit checkout -b dev\n   \ngit checkout命令加上-b参数表示创建并切换，相当于以下两条命令：\n$ git branch dev $ git checkout dev Switched to branch \u0026#39;dev\u0026#39;   用git branch命令查看当前分支,当前分支前面会标一个*号：\n$ git branch\n*dev\nmaster\n  分支的提交\n   \n  切换回主分支\ngit checkout master\n   \n  把dev分支的工作成果合并到master分支上：\ngit merge dev\n  git merge命令是合并指定分支到当前分支。\n \n  删除dev分支\ngit branch -d dev\n  因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。\n  可以用git push origin :dev 删除远程分支dev。\n4.2.解决冲突 当两条分支对同一个文件的同一个文本块进行了不同的修改，并试图合并时，Git不能自动合并的，称之为冲突(conflict)。解决冲突需要人工处理。\ndev分支和master分支有不同提交\n \n这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突。\n git status也可以告诉我们冲突的文件,\u0026laquo;\u0026laquo;\u0026laquo;\u0026lt;，=======，\u0026raquo;\u0026raquo;\u0026raquo;\u0026gt;标记出不同分支的内容。  对于简单的合并，手工编辑，然后去掉这些标记，最后像往常的提交一样先add再commit即可。\n \n 用git log \u0026ndash;graph命令可以看到分支合并图   注意分支和分支并不是完完全全的平行.在切换分支前, 一定要在做出改动的分支将改动提交, 否则可能会将改动带到切换到的分支, 产生误会. 只要提前提交了, 改动就不会带过去。 其实多个分支是共用暂存区的，也就是说如果在分支1上仅add而不commit，实际暂存区中已经记录该次修改。哪怕后续切换到分支2上再进行commit也是有效的操作，只不过已经不是自己想要的处理。 合并如果没有冲突出现也就是自动合并成功, 则在当前分支中不需要add/commit提交合并后的内容, 因为实际上当前分支在合并成功后就指向了最近的commit(由做出改动的分支提交)。  4.3.分支管理策略 通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。\n如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。\ngit merge --no-ff -m \u0026#34;描述\u0026#34; dev 因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。\n查看分支历史\ngit log --graph --pretty=oneline --abbrev-commit  \n \n在实际开发中，应该按照几个基本原则进行分支管理：\nmaster分支应该是非常稳定的，仅用来发布新版本，平时不在上面干活；\ndev分支是不稳定的，发布版本时，把dev分支合并到master上，发布1.0版本。\n每个人都有自己的分支，时不时地往dev上合并。\n \n4.4.Bug分支 当前工作到一般还不能提交，但是又要修复bug添加bugfix分支，可以用stash存储工作状态。\n$ git stash 现在，用git status查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug。\n修完bug,回到原来分支，用git status list查看存储状态。用git stash apply恢复，git stash drop清空。或者用git stash pop一步完成。\ngit stash pop 4.5.Feature分支 添加实验性功能时，不希望乱七八遭的代码把主分支打乱，最好添加feature分支，在上面开发，完成后合并、删除。\n4.6.多人协作 当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。\n要查看远程库的信息，用git remote：\ngit remote 或者，用git remote -v显示更详细的信息：\ngit remote -v 并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？\n  master分支是主分支，因此要时刻与远程同步；\n  dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；\n  bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；\n  feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。\n  小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支：\n$ git checkout -b dev origin/dev 现在，他就可以在dev上继续修改，然后，时不时地把dev分支push到远程。\n小伙伴已经向origin/dev分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送，失败。\n小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送。\ngit pull git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，先设置dev和origin/dev的链接，再pull：\n$ git branch --set-upstream dev origin/dev $ git pull 多人协作的工作模式通常是这样：\n  首先，可以试图用git push origin branch-name推送自己的修改；\n  如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；\n  如果合并有冲突，则解决冲突，并在本地提交；\n  没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！\n  如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch \u0026ndash;set-upstream branch-name origin/branch-name。\n  这就是多人协作的工作模式，一旦熟悉了，就非常简单。\n五.标签管理 tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。\n5.1.创建标签 切换到需要打标签的分支上：\ngit branch git checkout master git tag v1.0 给master分支打上了v1.0的标签。\n查看所有标签：\ngit tag 以前的commit忘记打标签了，需要找到commit id：\ngit log --pretty=oneline --abbrev-commit 找到id比如是xxx\n打上标签\ngit tag v0.9 xxx 注意，标签不是按时间顺序列出，而是按字母排序的。可以用git show 查看标签信息：\ngit show v0.9 还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字\ngit tag -a v0.1 -m \u0026#34;version 0.1 released\u0026#34; xxxid 用命令git show 可以看到说明文字：\ngit show v0.1 还可以通过-s用私钥签名一个标签：\ngit tag -s v0.2 -m \u0026#34;signed version 0.2 released\u0026#34; xxxid 签名采用PGP签名，因此，必须首先安装gpg（GnuPG），如果没有找到gpg，或者没有gpg密钥对，就会报错。\n5.2.操作标签 如果标签打错了要删除：\ngit tag -d v0.1 因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。\n如果要推送某个标签到远程，使用命令git push origin ：\ngit push origin v1.0 或者，一次性推送全部尚未推送到远程的本地标签：\ngit push origin --tags 如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：\ngit tag -d v0.9 然后，从远程删除。\ngit push origin :refs/tags/v0.9 要看看是否真的从远程库删除了标签，可以登陆GitHub查看。\n","date":"2017-11-13T00:00:00Z","permalink":"/p/git-note/","title":"git笔记"},{"content":"用Github Page 搭免费博客 一.搭建hexo博客\n1.安装Node.js\n下载地址：传送门\n下载的文件是.msi后缀的，win10-x64-ltsb2016直接双击安装可能会出现2502、2503错误，在安装文件所在目录下，Shit+右键，在此处打开命令窗口，输入msiexec /i 文件名.msi ，就能成功安装。（如果还是无效，用管理员权限cmd）\n可以通过node -v命令来测试NodeJS是否安装成功。\n2.安装Git\n下载地址：传送门\n下载相应版本完成安装，可以通过git -version命令来测试git是否安装成功。\n3.注册Github账号\n准备好fq工具，注册时的usename用户名和邮箱很重要，因为默认的博客地址是https://usename.github.io/这种形式的，邮箱则关系到安全和通知。\n3.1添加SSH Key\nSSH Key是一个认证，让github识别绑定这台机器，允许这台机器提交。执行如下命令：\ncd ~/. ssh ~这个符号，表示在用户目录下 执行代码如果提示：No such file or directory 说明你是第一次使用git。\n新建新的SSH Key\n在Git Bash执行代码：\nssh-keygen -t rsa -C \u0026quot;你的邮箱@gmail.com\u0026quot; 注意：此处的-C的是大写的。\n然后系统会要求你输入密码（密码在后面每次提交都需要输入，嫌麻烦可以直接两次回车不设置）：\nEnter passphrase (empty for no passphrase):\u0026lt;输入加密串\u0026gt; Enter same passphrase again:\u0026lt;再次输入加密串\u0026gt; 在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容。\n 输入密码的时候没有 * 字样的，你直接输入就可以了。 邮箱输错/密码忘记，  \u0026mdash;待完善 2020-02-22尝试迁移hexo到hugo\n","date":"2017-11-13T00:00:00Z","permalink":"/p/github-page-blog/","title":"用Github Page 搭免费博客"},{"content":"1.背景图 用户设置：\n// 背景图 \u0026quot;background.useDefault\u0026quot;: false, \u0026quot;background.customImages\u0026quot;: [ \u0026quot;file:///D:/Pictures/头图/1.png\u0026quot;, \u0026quot;file:///D:/Pictures/头图/2.png\u0026quot;, \u0026quot;file:///D:/Pictures/头图/3.png\u0026quot;]  图片整体大小用ps调整就可以了。\n","date":"2017-11-08T00:00:00Z","permalink":"/p/vscode-setting/","title":"vscode使用笔记"}]