[{"content":"使用场景:\nmacos下使用alacritty终端, 偶尔需要分屏或者多tab, 需要tmux,但不经常用记不住快捷键, 看help又太慢 所以直接把常用的功能添加到右键菜单里.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 # Right-click context menu bind-key -Troot MouseDown3Pane display-menu -xM -yM \\ \u0026#34;New Session\u0026#34; S \u0026#34;command-prompt -p \\\u0026#34;New Session:\\\u0026#34; \\\u0026#34;new-session -A -s \u0026#39;%%\u0026#39;\\\u0026#34;\u0026#34; \\ \u0026#34;Kill Session\u0026#34; x \u0026#34;kill-session\u0026#34; \\ \u0026#34;Kill Other Session(s)\u0026#34; X \u0026#34;kill-session -a\u0026#34; \\ \u0026#34;\u0026#34; \\ \u0026#34;New Window\u0026#34; ␍ new-window \\ \u0026#34;Kill Window\u0026#34; k \u0026#34;killw\u0026#34; \\ \u0026#34;Choose Window\u0026#34; w choose-window \\ \u0026#34;Previous Window\u0026#34; 🡠 previous-window \\ \u0026#34;Next Window\u0026#34; 🡢 next-window \\ \u0026#34;Swap Window Right\u0026#34; ↑ \u0026#34;swap-window -t -1\u0026#34; \\ \u0026#34;Swap Window Left\u0026#34; ↓ \u0026#34;swap-window -t +1\u0026#34; \\ \u0026#34;Horizontal Split\u0026#34; v \u0026#34;split-window -h\u0026#34; \\ \u0026#34;Vertical Split\u0026#34; s \u0026#34;split-window -v\u0026#34; \\ \u0026#34;\u0026#34; \\ \u0026#34;Layout Horizontal\u0026#34; h \u0026#34;select-layout even-horizontal\u0026#34; \\ \u0026#34;Layout Vertical\u0026#34; k \u0026#34;select-layout even-horizontal\u0026#34; \\ \u0026#34;\u0026#34; \\ \u0026#34;Swap Pane Up\u0026#34; \u0026lt; \u0026#34;swap-pane -U\u0026#34; \\ \u0026#34;Swap Pane Down\u0026#34; \u0026gt; \u0026#34;swap-pane -D\u0026#34; \\ \u0026#34;Break Pane\u0026#34; t break-pane \\ \u0026#34;Join Pane\u0026#34; j \u0026#34;choose-window \u0026#39;join-pane -h -s \\\u0026#34;%%\\\u0026#34;\u0026#39;\u0026#34; \\ \u0026#34;#{?window_zoomed_flag,Unzoom,Zoom}\u0026#34; z \u0026#34;resize-pane -Z\u0026#34; 效果图如下: 更多配置在https://github.com/jqtmviyu/macosDotfiles, 因为是抄来抄去的配置, 具体还得去官方文档.\n","date":"2023-09-08T18:24:31+08:00","permalink":"/p/add_context_menu_for_tmux/","title":"给tmux添加右键菜单"},{"content":"参考:\nhttps://zhuanlan.zhihu.com/p/651442490 https://wpbeaches.com/set-up-virtual-hosts-on-macos-big-sur-11-in-apache/ macos 自带apache2, 不用装nginx等软件\napache2 常见命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # 启动apache2 sudo apachectl start # 停止apache2 sudo apachectl stop # 重启apache2 sudo apachectl restart # 查看apache2状态 sudo apachectl status # 检查配置 sudo apachectl configtest # 重新加载配置 sudo apachectl graceful # 添加自启服务 sudo launchctl load -w /System/Library/LaunchDaemons/org.apache.httpd.plist # 使用homebrew 替换内置apache先停止内置的 sudo apachectl stop sudo launchctl unload -w /System/Library/LaunchDaemons/org.apache.httpd.plist 编辑主配置文件 1 2 3 # 先备份 sudo cp /etc/apache2/httpd.conf /etc/apache2/httpd.conf.bak sudo vim /etc/apache2/httpd.conf 1 2 3 4 5 6 7 8 9 10 11 12 # 修改主机名 ServerName macmini.local:80 # 和webdav相关的行取消注释 LoadModule dav_module libexec/apache2/mod_dav.so LoadModule dav_fs_module libexec/apache2/mod_dav_fs.so LoadModule dav_lock_module libexec/apache2/mod_dav_lock.so LoadModule auth_digest_module libexec/apache2/mod_auth_digest.so Include /private/etc/apache2/extra/httpd-dav.conf # 修改用户和用户组 # 在终端中输入 id 获取 User 用户名 Group staff 编辑webdav配置文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 # 备份 sudo cp /private/etc/apache2/extra/httpd-dav.conf /private/etc/apache2/extra/httpd-dav.conf.bak # /Users/用户名/Documents/webSite/webdav/var这个目录是自己创建的 DavLockDB \u0026#34;/Users/用户名/Documents/webSite/webdav/var/DavLock\u0026#34; # 需要共享的文件夹 /music是服务器路径, 后面的是要分享的本地文件夹 Alias /music \u0026#34;/Users/用户名/Music\u0026#34; # 这里也同样改动 \u0026lt;Directory \u0026#34;/Users/用户名/Music\u0026#34;\u0026gt; Dav On AuthType Digest # 貌似是密码提示相关,就保持webdav AuthName webdav # You can use the htdigest program to create the password database: # htdigest -c \u0026#34;/usr/user.passwd\u0026#34; DAV-upload admin # 这个密码文件后面生成 AuthUserFile \u0026#34;/Users/用户名/Documents/webSite/webdav/user.passwd\u0026#34; Require valid-user # 新增的一行 AuthDigestProvider file # Allow universal read-access, but writes are restricted # to the admin user. # 这里注释掉三行 # \u0026lt;RequireAny\u0026gt; # Require method GET POST OPTIONS # Require user admin # \u0026lt;/RequireAny\u0026gt; \u0026lt;/Directory\u0026gt; 补充: 子文件夹重定向到系统其他目录(有顺序) 需要先在davRoot目录下新建obsidian和music文件夹\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 Alias /dav/music \u0026#34;/Users/用户名/Music\u0026#34; Alias /dav/obsidian \u0026#34;/Users/用户名/Documents/obsidian\u0026#34; Alias /dav \u0026#34;/Users/用户名/Documents/webSite/davRoot\u0026#34; \u0026lt;Directory \u0026#34;/Users/用户名/Music\u0026#34;\u0026gt; Dav On AuthType Digest AuthName webdav AuthUserFile \u0026#34;/Users/用户名/Documents/webSite/webdav/user.passwd\u0026#34; AuthDigestProvider file Require valid-user \u0026lt;/Directory\u0026gt; \u0026lt;Directory \u0026#34;/Users/用户名/Documents/obsidian\u0026#34;\u0026gt; Dav On AuthType Digest AuthName webdav AuthUserFile \u0026#34;/Users/用户名/Documents/webSite/webdav/user.passwd\u0026#34; AuthDigestProvider file Require valid-user \u0026lt;/Directory\u0026gt; \u0026lt;Directory \u0026#34;/Users/用户名/Documents/webSite/davRoot\u0026#34;\u0026gt; Dav On AuthType Digest AuthName webdav AuthUserFile \u0026#34;/Users/用户名/Documents/webSite/webdav/user.passwd\u0026#34; AuthDigestProvider file Require valid-user \u0026lt;/Directory\u0026gt; 生成密码文件 1 2 3 4 5 6 7 # 创建配置目录 mkdir -p /Users/用户名/Documents/webSite/webdav/var # 生成密码文件 sudo htdigest -c \u0026#34;/Users/用户名/Documents/webSite/webdav/user.passwd\u0026#34; webdav 用户名 # 自己实际的 用户名:用户组 sudo chown -R 用户名:staff /Users/用户名/Documents/webSite sudo chmod -R 755 /Users/用户名/Documents/webSite 添加磁盘权限 macOS 设置，隐私与安全性，完全磁盘访问权限，依次添加 httpd 与 htdigest\n路径为/usr/sbin/httpd, /usr/sbin/htdigest\n设置host 1 2 3 4 sudo vim /etc/hosts # 新增 127.0.0.1 macmini.local www.macmini.local 重新启动 1 2 3 4 # 检查配置 sudo apachectl configtest # 重新加载配置 sudo apachectl graceful 日志路径: /var/log/apache2/error_log\n连接 在Finder中按下cmd + k, 输入地址http://macmini.local/music\n作为静态服务器 修改基本配置 1 2 3 4 5 6 7 8 9 10 sudo vim /etc/apache2/httpd.conf # 取消注释 Include /private/etc/apache2/extra/httpd-vhosts.conf # 改成自己要挂载的路径 DocumentRoot \u0026#34;/Users/用户名/Documents/webSite/www\u0026#34; \u0026lt;Directory \u0026#34;/Users/用户名/Documents/webSite/www\u0026#34;\u0026gt; MultiviewsMatch Any 设置虚拟主机 1 2 3 4 5 6 7 8 9 10 11 12 sudo cp /etc/apache2/extra/httpd-vhosts.conf /etc/apache2/extra/httpd-vhosts.conf.bak sudo vim /etc/apache2/extra/httpd-vhosts.conf # 新增 \u0026lt;VirtualHost *:80\u0026gt; ServerAdmin admin@macmini.local DocumentRoot \u0026#34;/Users/用户名/Documents/webSite/www\u0026#34; ServerName macmini.local ServerAlias www.macmini.local ErrorLog \u0026#34;/private/var/log/apache2/macmini.local-error_log\u0026#34; CustomLog \u0026#34;/private/var/log/apache2/macmini.local-access_log\u0026#34; common \u0026lt;/VirtualHost\u0026gt; 重启 把静态资源放到DocumentRoot, 包含index.html\n1 2 3 4 # 检查配置 sudo apachectl configtest # 重新加载配置 sudo apachectl graceful 浏览器输入地址http://macmini.local\nwebdav改成basic验证 安卓上的一些同步软件不支持Digest验证, 只好换成Basic\n1 2 3 4 # AuthType Digest AuthType Basic # AuthUserFile \u0026#34;/Users/用户名/Documents/webSite/webdav/user.passwd\u0026#34; AuthUserFile \u0026#34;/Users/用户名/Documents/webSite/webdav/user-basic.passwd\u0026#34; 1 2 3 4 5 6 7 8 9 # 生成新的授权文件 sudo htpasswd -c \u0026#34;/Users/用户名/Documents/webSite/webdav/user-basic.passwd\u0026#34; 用户名 sudo chmod -R 755 /Users/用户名/Documents/webSite/webdav/user-basic.passwd sudo chown -R 用户名:staff /Users/用户名/Documents/webSite/webdav/user-basic.passwd # 检查配置 sudo apachectl configtest # 重新加载配置 sudo apachectl graceful ","date":"2023-09-07T11:06:39+08:00","permalink":"/p/macos_local_website_and_webdav/","title":"Macos部署webdav和静态网站"},{"content":"以下均为开源免费软件\n效果图:\n安装 \u0026lsquo;OpenInTerminal\u0026rsquo; OpenInTerminal\n软件没有新建txt 和用 neovim打开 功能, 需要自己写脚本用 Automator 转成 app. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/bin/bash config_file=\u0026#34;$HOME/.config/alacritty/alacritty_nvim.yml\u0026#34; nvim_command=\u0026#34;/usr/local/bin/nvim\u0026#34; if [ -n \u0026#34;$1\u0026#34; ]; then target=\u0026#34;$1\u0026#34; if [ -d \u0026#34;$1\u0026#34; ]; then working_directory=\u0026#34;$1\u0026#34; else working_directory=$(dirname \u0026#34;$1\u0026#34;) fi else target=\u0026#34;\u0026#34; fi open -na \u0026#34;Alacritty\u0026#34; --args --config-file=\u0026#34;$config_file\u0026#34; --working-directory=\u0026#34;$working_directory\u0026#34; -e \u0026#34;$nvim_command\u0026#34; \u0026#34;$target\u0026#34; 替换图标 ontents/Resources/ApplicationStub.icns 新建 txt 文件 finder-new-file\n","date":"2023-09-06T10:01:24+08:00","permalink":"/p/finder_right_menu/","title":"macos finder右键菜单定制"},{"content":"macos 保存资料从ventura降级到monterey(兼容其他版本升级后降级) 原理: 在同一块硬盘上同时装两个系统, 然后手动迁移数据, 用一段时间没问题后把原来的系统删除\n1: 为什么不用时间机器备份? : 从高降到低版本, 有网友说不支持还原, 而且需要另外的硬盘\n2: 有哪些缺点? 这样做相当于重装系统, 手动迁移数据会有少数需要驱动的应用需要重装, 部分应用的设置丢失\n3: 大概需要花多少时间? 建议至少空闲1天出来才动手\n4: 重装前有条件还是用时间机器完全备份, 至少也要用手机把应用(包括homebrw里的)拍下照\n分区 在我理解: macos上的宗卷和windows上的分区不太一样, windows上的分区分好后调整非常麻烦, 而macos的宗卷更类似linux上的文件夹, 并不是固定大小, 而是动态的挂载点\n所以分出一个apfs宗卷装系统, 确定硬盘上有个150-200G应该就够了\n分区方法参考: ===BV1sW4y1W7Fa===, 后面部分参考自该教程\n使用系统自带磁盘工具, 在容器disk xx 右键新建一个apfs宗卷, 格式选择apfs 为了做区分, 可以命名为Macos 12 方便区分, 还可以把原来的宗卷顺带命名为Macos 13\n下载monterey完整系统 不同于大部分教程使用商店下载, 我更推荐使用命令或者找 github 上的shell 工具\n使用命令下载 1 2 3 4 5 # 获取列表 softwareupdate --list-full-installers # 下载monterey最新, 假设当前最新是12.6.5 softwareupdate --fetch-full-installer --full-installer-version 12.6.5 # 上面系统下载完成后,启动台里会多出一个 Install macOS Monterey.app 使用github上的工具 https://github.com/corpnewt/gibMacOS 类似的工具还有很多 制作安装u盘 参考苹果官方文档\nCreate a bootable installer for macOS https://support.apple.com/en-us/HT201372\n格式化u盘(至少15G), 同样使用自带的磁盘工具, 格式选择 macos扩展(日志式), 假设命名为MyVolume 写入u盘 注意: 最好用自带终端, 如果用item2, 要授权完整磁盘权限, 否则写入失败\n1 sudo /Applications/Install\\ macOS\\ Monterey.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume 安装系统 写入成功后, 插着u盘重启电脑, 进入选择界面的方法自己搜下, 我是黑苹果 opencore 直接空格就行, 选择安装\n安装的时候选择刚才新分的宗卷, 千万别选错了\n安装完成后安装新系统进行设置, 用户名记得和原来的用户名选择一样\n迁移数据 应用迁移 打开磁盘工具, 选择原来的旧宗卷, 打开所在文件夹, 找到 Application , 直接把原来的应用 移动 到新的应用目录, 选择移动是因为更节省空间\n至于不同宗卷的移动会不会比复制更快, 我不太清楚, 但感觉是更快\n这样大部分应用就迁移完成了\n用户数据迁移 打开用户目录, 把原来的文档, 音乐, 下载 等目录下的文件 移动 到新的目录, 记得使用快捷键cmd+sift+. 显示所有隐藏文件和文件夹, 像.ssh , .cinfig, .vimrc, .profile 之类的也移动过去\nhomebrew可能需要重新安装下, homebrew安装的应用应该还在, 如果你有迁移的话\n库文件迁移 库文件有两个, 一个是用户权限的, 一个是管理员权限的, 路径分别是~/Library和/Library, 你可以对比下新旧的文件差异\n少数应用配置迁移 上面的应用迁移后, 大部分直接打开就能用了, 但有的软件想找回原来的设置, 最简单的方法是谷歌搜下该软件在macos下的数据保存路径, 然后移动覆盖就行.\n例如chrome浏览器~/Library/Application Support/Google/Chrome/Default, 刚好是上面的库文件\n如果有的软件没保存在用户目录下呢? 用 AppCleaner 先把软件打开正常用下, 然后打开AppCleaner, 截图, 保留软件本体, 把数据删了, 到旧宗卷里把数据移动回来\n少数应用需要重装 pd虚拟机 java8 按键映射软件 Karabiner homebrew 删除旧宗卷 先用一段时间没问题后再删, 反正原来的大部分数据都被移动到新宗卷了, 占用的空间也不是很大.\n","date":"2023-05-10T23:02:26+08:00","permalink":"/p/macos_system_downgrade/","title":"Macos降级"},{"content":"环境变量挂载到全局 使用场景: api前缀添加到全局, 所有组件都可以直接使用\n环境文件: 1 2 // .env VITE_API_URL=https://xxx/api 挂载到全局window上: 1 2 // main.tsx window.apiUrl = import.meta.env.VITE_API_URL 添加ts类型: 1 2 3 4 5 6 7 8 // vite-env.d.ts // 第一行引入 Vite 中的客户端类型定义文件 /// \u0026lt;reference types=\u0026#34;vite/client\u0026#34; /\u0026gt; interface Window { apiUrl: string; } 使用: 1 axios.get(`${window.apiUrl}/students`) ","date":"2023-05-09T23:20:19+08:00","permalink":"/p/vite_global_variable/","title":"vite全局变量"},{"content":"问题场景: 使用vscode ssh 远程开发如何访问远程服务器上启动的vite项目\n方法一:\n1 npx vite --host 0.0.0.0 方法二:\n1 2 3 4 5 # 编辑vite.config.ts server: { port: 9999, host: \u0026#34;0.0.0.0\u0026#34; }, 方法三:\n1 2 3 4 5 6 7 # 修改package.json \u0026#34;scripts\u0026#34;: { \u0026#34;dev\u0026#34;: \u0026#34;vite\u0026#34;, \u0026#34;start\u0026#34;: \u0026#34;vite --host 0.0.0.0\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;vue-tsc --noEmit \u0026amp;\u0026amp; vite build\u0026#34;, \u0026#34;serve\u0026#34;: \u0026#34;vite preview\u0026#34; }, ","date":"2023-04-30T17:43:06+08:00","permalink":"/p/open_vite_project_on_remote/","title":"远程开发如何启动vite服务"},{"content":"迁移vscode到vscodium 为什么要迁移? intel芯片的 macos 上, 最新版的vscode在使用具有git graph功能的插件时,总是内存溢出无响应 包括已经停更很久的git graph和一直更新的gitlens 实际上不止最新版, 应该说除了1.70.2, 后面的多个版本都会有这个问题\n安装 1 brew install --cask vscodium 官方文档 一些建议和设置\n问题点 插件市场不是vscode的市场, 而是Open VSX 如果用导入profiles的方法, 有部分插件没装上 修改product.json文件更改插件源, 会卡在重新加载 迁移步骤 在vscodium/vscode设置里搜索@tag:usesOnlineServices,把在线服务相关的关掉 复制插件: cp -r ~/.vscode/extensions ~/.vscode-oss/extensions 复制快捷键: cp $HOME/Library/Application\\ Support/Code/User/keybindings.json $HOME/Library/Application\\ Support/VSCodium/User/keybindings.json 复制配置文件: cp $HOME/Library/Application\\ Support/Code/User/settings.json $HOME/Library/Application\\ Support/VSCodium/User/settings.json 复制用户代码提示: cp -r $HOME/Library/Application\\ Support/Code/User/snippets $HOME/Library/Application\\ Support/VSCodium/User/snippets ","date":"2023-03-29T16:45:21+08:00","permalink":"/p/migrating_from_visual_studio_code_to_vscodium/","title":"迁移vscode到vscodium"},{"content":"重新编译keeWeb修复坚果云Last-Modified错误 问题描述 问题描述: keeWeb使用坚果云webdav会报错没有Last-Modified\n官方issue: https://github.com/keeweb/keeweb/issues/1523\n总结:坚果云webdav返回响应头里没有Last-Modified\n其它方案 之前因为这个原因, 换成了 keepassxc了, 但要另外装一个软件CloudMounter来把webdav挂载到本地硬盘上.\n重新编译 参考: https://www.cyqsd.cn/8017.html\nclone 主仓库: https://github.com/keeweb/keeweb 到本地\n全局安装构建工具Grunt\n1 npm install grunt-cli -g 安装npm包 1 npm install 修改代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // /app/scripts/storage/storage-webdav.js // 搜到const rev = xhr.getResponseHeader(\u0026#39;Last-Modified\u0026#39;), 大概330行 //把下面的 if 判断逻辑注释掉 // if (!rev \u0026amp;\u0026amp; !config.nostat) { // this.logger.debug( // config.op + \u0026#39; error\u0026#39;, // config.path, // \u0026#39;no headers\u0026#39;, // this.logger.ts(ts) // ); // if (callback) { // callback(Locale.webdavNoLastModified, xhr); // callback = null; // } // return; // } 打包 mac 安装包 1 grunt dev-desktop-darwin --skip-sign --force 安装: /tmp/desktop/KeeWeb-darwin-x64目录下的app直接拖到Applications 内存占用 keepassxc: 95m\nCloudMounter:176m\nkeeweb: 460m\nelectron真是占用大呀. 本地应用还不如直接用 keepassxc + CloudMounter, CloudMounter还支持挂载alist等webdav, 或许部署到服务器是个更好的选择.\n","date":"2023-03-28T14:02:18+08:00","permalink":"/p/keeweb_last_modified_error_on_jianguoyun/","title":"Keeweb_Last Modified_error"},{"content":"pm 2 用于生产环境的 Nodejs 的进程管理工具 保证服务不会中断一直在线，并且提供0秒reload功能，还有其他一系列进程管理、监控功能 内置一个负载均衡\n官方: PM2 - Quick Start\n常见命令 启动 1 2 3 4 5 6 7 8 # 启动app.js应用 pm2 start app.js # 启动应用并设置name pm2 start app.js --name 程序名 # 开发模式启动，即不启用后台运行 pm2-dev start ... 监视 监听模式启动，当文件发生变化，自动重启\n1 2 3 4 # 指定程序名的情况下 pm2 start app.js --name 程序名 --watch # 未指定程序名的情况下 pm2 start app.js --watch 进程 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # 列出所有进程 pm2 list # 简写 pm2 ls # 从进程列表中删除进程 pm2 delete [appname] | id # 指定进程名删除 pm2 delete app # 指定进程id删除 pm2 delete 0 # 删除进程列表中所有进程（关闭并删除应用） pm2 delete all # 查看某个进程具体情况 pm2 describe app # 监控各个应用进程cpu和memory使用情况 pm2 monit 重启 1 2 3 4 5 6 7 8 # 同时杀死并重启所有进程，短时间内服务不可用,生成环境慎用 pm2 restart app.js # 重启所有进程 pm2 restart all # 重新启动所有进程，0秒重启，始终保持至少一个进程在运行 pm2 reload app.js # 以群集模式重新加载所有应用程序 pm2 gracefulReload all 日志 1 2 3 4 5 6 7 8 9 10 # 根据指定应用名/应用ID查看应用日志 pm2 logs [Name|ID] # 查看所有进程的日志 pm2 logs all # 显示指定应用详情 pm2 show [Name|ID] # 清除日志 pm2 flush \u0026lt;app-name\u0026gt; 停止 1 2 3 pm2 stop [AppName|ID] pm2 stop all 杀死所有进程 1 pm2 kill 静态服务器 1 2 # 将目录dist作为静态服务器根目录，端口为8080 pm2 serve ./dist 8080 集群 1 2 3 4 # 启用群集模式（自动负载均衡） # -i 表示 number-instances 实例数量 # max 表示 PM2将自动检测可用CPU的数量 可以自己指定数量 pm2 start app.js -i max 设置开机启动 1 2 3 4 5 # 可选项：ubuntu, centos, redhat, gentoo, systemd, darwin, amazon pm2 startup centos # 按提示输入命令,最后保存 pm2 save pm2 unstartup centos ","date":"2023-03-26T18:52:22+08:00","permalink":"/p/pm2/","title":"Pm2"},{"content":"NodeJS Node 是一个构建于 Chrome V8引擎之上的一个 Javascript 运行环境, 作用是让 js 拥有开发服务端的功能\n使用事件驱动、非阻塞 IO 模型（异步读写）使得它非常的轻量级和高效\nNode 中绝大多数 API 都是异步（类似于 ajax），目的是提高性能\nnode. js 官网: https://nodejs.org/en/\n中文文档: http://nodejs.cn/api/\n英文文档: https://nodejs.dev/en/api/v19/documentation/\nnpm 官网 https://www.npmjs.com\n安装 1 2 # 查看版本 node -v node 版本管理: 安装 n\n1 2 npm install -g n # n --help 监控 js 变化并重启服务: node-dev\n1 2 npm i -g node-dev node-dev app.js 客户端 js 和服务端 js 客户端 JavaScript 由三部分组成\nECMAScript：确定 js 的语法规范 DOM：js 操作网页内容 BOM：js 操作浏览器窗口 node 中的 JavaScript 组成\nECMAScript 核心模块 第三方模块 基本的语法和写法和之前的 js 没有本质的区别\n在 nodejs 中使用 dom 与 bom 的 api 程序会报错 服务器端没有界面 不需要操作浏览器和页面元素 运行 node. js 程序 node [js文件路径]\n生产环境: pm2\n模块化 CommonJS 规范 模块必须通过 module.exports 导出对外的变量或接口，通过require() 来导入其他模块的输出到当前模块作用域中。\nCommonJS模块的特点:\n所有代码运行在当前模块作用域中，不会污染全局作用域 模块同步加载，根据代码中出现的顺序依次加载 模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存。 ==模块使用前要先导入==\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 /** * 模块化规范 * CommonJS: 2015年前社区开发, nodejs官方默认 * - 自定义模块 * - 一个js文件就是一个模块 * - 使用 exports 或者 module.exports 暴露: exports.xxx = xxx * module.exports = {xxx:xxx} * 不能使用 exports = {xxx:xxx} 这是在给变量赋值, 上面的是修改对象的属性 * - 使用 require(\u0026#34;模块的路径\u0026#34;) 引入, 用变量来接收: const {xxx} = require() * - 后缀自动补全: 先找js, 再找json * - 核心模块 * - require(\u0026#34;模块名\u0026#34;) * - require(\u0026#34;node:模块名\u0026#34;) * nodejs将以下内容视为CommonJS * 1. 使用.cjs扩展名 * 2. package.json的type属性为CommonJS,且扩展名为js * 3. package.json不包含type属性,且扩展名为js * 4. 扩展名是mjs, cjs, json, node, js以外的值, package.json的type属性不是module */ (function(exports, require, module, __filename, __dirname){ // 所有的CommonJS模块都会被包装到一个函数里 // exports, require是作为参数传进来的 console.log(arguments) // 证明 }) ES 模块 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 /* ES模块: 原生, 2015年es6标准发布 * - mjs 扩展名 * - package.json的type属性设置为module * * - 导出: export let a = xxx * export const b = xxx * - 导入: import {} from \u0026#39;路径.mjs\u0026#39; * 改别名 import {a as b} from \u0026#39;./test.mjs\u0026#39; * 开发时要尽量避免 import * as c from \u0026#39;./test.mjs\u0026#39; , 按需引用 * - 设置默认导出: export default function sum(){} * default 后面跟值, export default let a = 0 这种不行, 后面是语句 * 一个模块只有一个默认导出 * - 默认导入: import sum {a} from \u0026#39;./test.mjs\u0026#39; * import {default as sum, a} from \u0026#39;./test.mjs\u0026#39; * 默认导入可以随便起名 * 默认导入可以和按需导入一起用 * - 通过es模块化导入的, 都是常量 * - es模块都是运行在严格模式下 */ node. js 核心模块 Node 应用是由模块组成的，Node 遵循了 CommonJS的模块规范，来隔离每个模块的作用域，使每个模块在它自身的命名空间中执行。\nfs文件模块(读写文件) 先导入文件模块\n1 const fs = require(\u0026#39;fs\u0026#39;) readFile异步读取 1 2 3 4 5 6 7 8 fs.readFile(path[, options], callback(err,data)) /** * 第一个参数：文件路径 * 第二个参数：编码格式 （可选参数，默认为buffer二进制,buffer:数据缓冲区） * 第三个参数：读取回调操作（异步操作） * err:如果读取成功, err为null,否则读取失败（一般文件路径错误或者找不到文件） * data:读取到的数据(字符串|二进制) */ 示例:\n1 2 3 4 5 6 7 8 9 10 fs.readFile(\u0026#39;./data/aaa.txt\u0026#39;,\u0026#39;utf-8\u0026#39;,(err,data)=\u0026gt;{ //按utf-8编码读取, 解决中文乱码 if(err){ console.log(err); //抛出异常，throw的作用就是让node程序终止运行，方便调试 throw err; }else{ console.log(data); }; }); 同步读取(几乎不用,会阻塞,一般在异步的api后面加上Sync就是同步):\n1 let data = fs.readFileSync(\u0026#39;./data/aaa.txt\u0026#39;,\u0026#39;utf-8\u0026#39;) writeFile异步写入 1 2 3 4 5 6 7 8 fs.writeFile(file, data[, options], callback(err)) /** * 第一个参数：文件路径 * 第二个参数：要写入的数据 * 第三个参数：文件编码 默认utf-8 * 第四个参数： 异步回调函数 * err: 如果成功，err为null.否则读取失败 */ 默认写入会覆盖 如果文件名不存在，新创建再写入 如果文件夹不存在，报错 示例:\n1 2 3 4 5 6 7 fs.writeFile(\u0026#39;./data/bbb.txt\u0026#39;,\u0026#39;测试\u0026#39;,\u0026#39;utf-8\u0026#39;,(err)=\u0026gt;{ if(err){ throw err; }else{ console.log(\u0026#39;写入成功\u0026#39;); }; }); 异步追加 异步地追加数据到文件，如果文件尚不存在则创建文件\n1 fs.appendFile(path, data[, options], callback(err)) Promise版本的fs方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 const fs = require(\u0026#34;node:fs/promises\u0026#34;) fs.readFile(path.resolve(__dirname, \u0026#39;./hello.js\u0026#39;)) .then(buffer=\u0026gt;{ console.log(buffer.toString()) // 也可以直接用toSting()方法转成字符串 }) .catch(err=\u0026gt;{ console.log(err) }) // 或者 ;(async()=\u0026gt;{ try{ const buffer = await fs.readFile(path.resolve(__dirname, \u0026#39;./hello.js\u0026#39;) console.log(buffer.toString()) }catch((err)=\u0026gt;{ console.log(err) }) })() 1 2 3 4 5 6 // 常见方法 fs.mkdir() // 创建目录 fs.rmkdir() // 删除目录 fs.rm() // 删除文件 fs.rename() // 重命名 fs.copyFile() // 复制 path路径模块 ==在服务端开发中，一般不要使用相对路径，而使用绝对路径==\n1 const path = require(\u0026#39;path\u0026#39;) nodejs中的绝对路径和相对路径 node中的相对路径： ./ 不是相对于当前文件所在路径，而是相对于执行node命令的文件夹路径(当前被执行的文件所在的文件夹路径).\n解决方案：在nodejs中，每一个js文件都有两个全局属性，它可以帮助我们获取到文件的绝对路径\n__filename:当前js文件绝对路径 ==__dirmame:当前js文件所在目录的绝对路径== windown中路径 用双反斜杠 \\\\ 而不是 \\\n示例:\n1 2 3 4 5 6 7 8 9 10 11 const fs = require(\u0026#39;fs\u0026#39;) let path = __dirname + \u0026#39;/aaa.txt\u0026#39; console.log(path) fs.readFile(path,\u0026#39;utf-8\u0026#39;,(err,data)=\u0026gt;{ if(err){ console.log(err); throw err; }else{ console.log(data); }; }); join()方法 路径拼接 1 2 3 4 5 path.join([...paths]) /*使用path模块拼接文件路径与使用\u0026#39;+\u0026#39;连接符拼接的好处 1.会自动帮我们正确添加路径分隔符 \u0026#39;/\u0026#39;,我们无需手动添加 2.当我们路径格式拼接错误的时候，能自动帮我们转换正确的格式 */ 示例:\n1 let filePath = path.join(__dirname, \u0026#39;./page/login.html\u0026#39;) resolve()方法 路径处理 1 2 3 4 // 把一个路径或路径片段的序列解析为一个绝对路径 // 传入路径从右至左解析，遇到第一个绝对路径解析停止 // 如果没有传入参数，将只返回当前根目录 path.resolve([...paths]) 示例:\n1 2 3 4 5 // \u0026#34;/b\u0026#34; 就是遇到的第一个绝对路径 path.resolve(\u0026#39;/a\u0026#39;, \u0026#39;/b\u0026#39;, \u0026#39;c\u0026#39;) // /b/c path.resolve(\u0026#39;/a\u0026#39;, \u0026#39;./b\u0026#39;, \u0026#39;c\u0026#39;) // /a/b/c //因为没有遇到第一个绝对路径，所以会一直向上解析(根目录路径/a/b/c) path.resolve(\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;) // /Users/siyuan/Desktop/example/node测试/a/b/c process 获取进程信息, 或者对进程进行操作\n使用: 全局变量, 直接使用\n属性和方法 process.exit(code): 结束当前进程, code默认0 process.nextTick(()=\u0026gt;{}): 将函数插入tick队列, 调用栈=\u0026gt;tick=\u0026gt;微任务队列=\u0026gt;宏任务队列 服务器基础 基本的访问流程 输入主机地址 指定端口(如果没有指定, 默认是80) 指定需要访问的资源路径 发起请求 获取服务器返回的结果并处理 http协议 超文本传输协议(HyperText Transfer Protocol), 是基于TCP/IP协议之上的应用层协议\nHTTP是一个客户端终端（用户）和服务器端（网站）请求和应答的标准 客户端和服务器的通信必须遵守某种协议，http协议就是最常见的一种\n端口 端口是通过端口号来标记的，端口号只有整数，范围是从0 到65535（2^16-1）\n常见的端口号:\n80：web服务器端口 3306：mysql数据服务器端口 查询端口状态netstat 以数字格式显示地址和端口信息netstat -n\n常见的状态码 200请求已成功，请求所希望的响应头或数据体将随此响应返回。出现此状态码是表示正常状态 404:请求失败，请求所希望得到的资源未被在服务器上发现 500:服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。一般来说，这个问题都会在服务器端的源代码出现错误时出现 返回数据的格式 text/html格式：html代码，浏览器会以html语法解析 text/css:样式，浏览器会以css语法解析 application/javascript:js代码，浏览器会以js语法解析 application/json:json格式字符串，描述从服务器返回的数据 hellow app.js 流程:\n导入模块 const * = require(*) 创建服务器const server = http.creatServer() 监听端口server.listen(端口, ()=\u0026gt;{}) 响应请求, 进行事件处理server.on('request', (req,res)=\u0026gt;{}) 注意点:\nreq.url可以获取当前用户请求的url 中文乱码 1 2 3 res.setHeader(\u0026#39;Content-type\u0026#39;,\u0026#39;text/html;charset=UTF-8\u0026#39;) // html页面不需要, 头部已有 客户端没有指定url,默认为/ 1 2 3 4 5 6 7 8 9 10 11 12 //1.导入http模块 //2.创建服务器 //3.监听端口 /* 第一个参数：端口号 第二个参数：ip地址 默认不写，就是本机ip（127.0.0.1） 第三个参数：一个回调函数，启动时会调用 */ //4.处理请求 1 2 3 4 5 6 7 8 9 10 11 12 const http = require(\u0026#39;http\u0026#39;) const server = http.createServer() server.listen(3000,\u0026#39;127.0.0.1\u0026#39;,(err)=\u0026gt;{ console.log(\u0026#39;服务器开启成功: http://127.0.0.1:3000\u0026#39;); }) server.on(\u0026#39;request\u0026#39;,(req,res)=\u0026gt;{ // 所有请求都响应 \u0026#39;hello word\u0026#39; res.end(\u0026#39;hello word\u0026#39;) }) 响应页面 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 const http = require(\u0026#39;http\u0026#39;) const fs = require(\u0026#39;fs\u0026#39;) const path = require(\u0026#39;path\u0026#39;) const server = http.createServer() server.listen(3000, () =\u0026gt; { console.log(\u0026#39;已开始监听 http://127.0.0.1:3000\u0026#39;) }) server.on(\u0026#39;request\u0026#39;, (req, res) =\u0026gt; { // 每个请求,都执行这里的代码 const url = req.url console.log(url) switch (url) { case \u0026#39;/\u0026#39;: case \u0026#39;/index\u0026#39;: res.end(\u0026#39;hello word\u0026#39;) break case \u0026#39;/login\u0026#39;: // 页面head已经有编码格式 fs.readFile(path.join(__dirname, \u0026#39;./page/login.html\u0026#39;), (err, data) =\u0026gt; { if (err) { res.end(\u0026#39;404 not found\u0026#39;) } else { res.end(data) } }) break default: res.end(\u0026#39;404 not found\u0026#39;) break } }) 允许跨域 1 res.setHeader(\u0026#39;Access-Control-Allow-Origin\u0026#39;, \u0026#39;*\u0026#39;) 响应不同的请求 req.method获取请求的类型\nget请求 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 const http = require(\u0026#39;http\u0026#39;) const fs = require(\u0026#39;fs\u0026#39;) const path = require(\u0026#39;path\u0026#39;) const server = http.createServer() server.listen(3000, () =\u0026gt; { console.log(\u0026#39;127.0.0.1:3000\u0026#39;) }) server.on(\u0026#39;request\u0026#39;, (req, res) =\u0026gt; { const url = req.url console.log(\u0026#39;url:\u0026#39;, url) const method = req.method console.log(\u0026#39;method\u0026#39;, method) if (url === \u0026#39;/getUserList\u0026#39; \u0026amp;\u0026amp; method === \u0026#39;GET\u0026#39;) { fs.readFile(path.join(__dirname, \u0026#39;./4-user.json\u0026#39;), \u0026#39;utf-8\u0026#39;, (err, data) =\u0026gt; { if (err) { console.log(err) res.end(\u0026#39;404\u0026#39;) } else { res.setHeader(\u0026#39;Content-type\u0026#39;, \u0026#39;text/html;charset=UTF-8\u0026#39;) res.end(data) } }) return } res.end(\u0026#39;hello word\u0026#39;) }) post请求 1 2 3 4 5 6 7 8 9 10 11 12 13 /** * node支持大容量的参数传递, 它会分批接收参数, 接收参数会触发两个事件 * 1.给req注册一个data事件 * req.on(\u0026#39;data\u0026#39;, (chunk)=\u0026gt;{}) * 每接收一次参数就触发一次, 接收到的chunk是字符串格式 * 如果参数较多，它支持分批进行参数的接收，当客户端每发送一次数据流，都会触发里面的回调函数，我们需要主动将这些数据拼接起来 * * 2.给req注册一个end事件 * req.on(\u0026#39;end\u0026#39;, ()=\u0026gt;{}) * 当客户端post数据全部发送完毕之后，就会触发这个事件 * * 3.使用querystring模块解析接收完成的post参数数据 */ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 // 服务器 const http = require(\u0026#39;http\u0026#39;) const fs = require(\u0026#39;fs\u0026#39;) const path = require(\u0026#39;path\u0026#39;) // 解析参数的querystring模块 const querystring = require(\u0026#39;querystring\u0026#39;) const server = http.createServer() server.listen(3000, () =\u0026gt; { console.log(\u0026#39;127.0.0.1:3000\u0026#39;) }) server.on(\u0026#39;request\u0026#39;, (req, res) =\u0026gt; { // 允许跨域 res.setHeader(\u0026#39;Access-Control-Allow-Origin\u0026#39;, \u0026#39;*\u0026#39;) const url = req.url console.log(\u0026#39;url:\u0026#39;, url) const method = req.method console.log(\u0026#39;method\u0026#39;, method) if (url === \u0026#39;/login\u0026#39; \u0026amp;\u0026amp; method === \u0026#39;POST\u0026#39;) { let postData = \u0026#39;\u0026#39; // 1.注册一个data事件 req.on(\u0026#39;data\u0026#39;, chunk =\u0026gt; { //具体多少次，取决于客户端带宽 postData += chunk }) req.on(\u0026#39;end\u0026#39;, () =\u0026gt; { // 2.给req注册一个end事件 // 3.使用querystring模块解析接收完成的post参数数据 let postObj = querystring.parse(postData) console.log(\u0026#39;postObj\u0026#39;,postObj) if (postObj.username == \u0026#39;admin\u0026#39; \u0026amp;\u0026amp; postObj.password == \u0026#39;123456\u0026#39;) { res.end(\u0026#39;yes\u0026#39;) } else { res.end(\u0026#39;no\u0026#39;) } }) } else { res.end(\u0026#39;hello word\u0026#39;) } }) 登录页\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;form method=\u0026#34;post\u0026#34; action=\u0026#39;http://127.0.0.1:3000/login\u0026#39;\u0026gt; 用户名:\u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#39;username\u0026#39; placeholder=\u0026#34;请输入用户名\u0026#34;\u0026gt;\u0026lt;br\u0026gt; 密码: \u0026lt;input type=\u0026#34;password\u0026#34; name=\u0026#39;passwrod\u0026#39; placeholder=\u0026#34;请输入密码\u0026#34;\u0026gt; \u0026lt;br\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;提交\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 模块化 可以先把路由和响应拆分出来\n以一个登录页面为例:\n程序入口 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // app.js // 路由被拆分到路由模块 const http = require(\u0026#39;http\u0026#39;) const router = require(\u0026#39;./js/router\u0026#39;) const server = http.createServer() server.listen(\u0026#39;3000\u0026#39;, function () { console.log(\u0026#39;http://127.0.0.1:3000\u0026#39;) }) server.on(\u0026#39;request\u0026#39;, function (req, res) { router(req, res) }) 路由模块 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 // js/router.js // 响应被拆分到响应模块 const handler = require(\u0026#39;./handler\u0026#39;) module.exports = function (req, res) { //获取请求方式 let method = req.method.toLowerCase() //获取请求url let url = req.url //判断请求方式和url //读取注册页面并返回 if (method == \u0026#39;get\u0026#39; \u0026amp;\u0026amp; url == \u0026#39;/register\u0026#39;) { handler.getRegisterPage(req, res, url) } //静态资源处理 else if (method == \u0026#39;get\u0026#39; \u0026amp;\u0026amp; url.indexOf(\u0026#39;/css/\u0026#39;) != -1 || url.indexOf(\u0026#39;/js/\u0026#39;) != -1 || url.indexOf(\u0026#39;/images/\u0026#39;) != -1) { handler.getStaticSource(req, res, url) } //实现用户注册 else if (method == \u0026#39;post\u0026#39; \u0026amp;\u0026amp; url == \u0026#39;/register\u0026#39;) { handler.userRegister(req, res, url) } } 响应处理 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 const fs = require(\u0026#39;fs\u0026#39;) const path = require(\u0026#39;path\u0026#39;) const mime = require(\u0026#39;mime\u0026#39;) module.exports = { //响应页面注册 getRegisterPage: function (req, res) { fs.readFile(path.join(__dirname, \u0026#39;../views/register.html\u0026#39;), function (err, data) { if (err) { res.end(\u0026#39;404\u0026#39;) throw err } else { res.end(data) } }) }, //响应静态资源 getStaticSource: function (req, res, url) { fs.readFile(path.join(__dirname, \u0026#39;../\u0026#39; + url), function (err, data) { if (err) { res.end(\u0026#39;404\u0026#39;) throw err } else { //根据文件类型不同设置响应头 res.setHeader(\u0026#39;Content-Type\u0026#39;, mime.getType(url)) res.end(data) } }) }, //实现用户注册 userRegister: function (req, res) { //分批接收数据 let str = \u0026#39;\u0026#39; req.on(\u0026#39;data\u0026#39;, (chunk) =\u0026gt; { str += chunk }) req.on(\u0026#39;end\u0026#39;, () =\u0026gt; { console.log(\u0026#39;str\u0026#39;,str) //调用自定义模块把接收的数据转成对象 let obj = JSON.parse(str) console.log(obj) //读取旧的数据 fs.readFile(path.join(__dirname, \u0026#39;../data/users.json\u0026#39;), \u0026#39;utf-8\u0026#39;, function (err, data) { //设置响应头 res.setHeader(\u0026#39;Content-type\u0026#39;, \u0026#39;text/html;charset=UTF-8\u0026#39;) if (err) { let ret = { code: 404, msg: \u0026#39;注册失败\u0026#39; } res.end(JSON.stringify(ret)) throw err } else { let arr = JSON.parse(data) console.log(\u0026#39;arr\u0026#39;,arr) console.log(\u0026#39;obj\u0026#39;,obj) //把数据加到旧数据 arr.push(obj) fs.writeFile(path.join(__dirname, \u0026#39;../data/users.json\u0026#39;), JSON.stringify(arr, null, \u0026#39; \u0026#39;), function (err, data) { if (err) { let ret = { code: 404, msg: \u0026#39;注册失败\u0026#39; } res.end(JSON.stringify(ret)) } else { let ret = { code: 200, msg: \u0026#39;注册成功\u0026#39; } res.end(JSON.stringify(ret)) } }) } }) }) } } 页面 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;用户注册\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;../css/index.css\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;register\u0026#34;\u0026gt; \u0026lt;form id=\u0026#34;myForm\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt; \u0026lt;label for=\u0026#34;\u0026#34;\u0026gt;用户名\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;username\u0026#34; class=\u0026#34;name\u0026#34; /\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;label for=\u0026#34;\u0026#34;\u0026gt;密码\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;password\u0026#34; name=\u0026#34;password\u0026#34; class=\u0026#34;pass\u0026#34; /\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;label for=\u0026#34;\u0026#34;\u0026gt;手机号\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;phone\u0026#34; class=\u0026#34;mobile\u0026#34; /\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;label for=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/label\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34; class=\u0026#34;submit\u0026#34;\u0026gt;立即注册\u0026lt;/button\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; const form = document.querySelector(\u0026#39;#myForm\u0026#39;) form.addEventListener(\u0026#39;submit\u0026#39;, e=\u0026gt;{ event.preventDefault() const formData = new FormData(event.target) const data = Object.fromEntries(formData.entries()) fetch(\u0026#39;http://127.0.0.1:3000/register\u0026#39;, { method: \u0026#39;post\u0026#39;, headers: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, }, body: JSON.stringify(data), }).then(res=\u0026gt;{ console.log(\u0026#39;res\u0026#39;, res) }) }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 查看应用内存占用 Node.js提供了内置的v8模块，可以用来查看程序的内存占用情况。具体步骤如下：\n在程序中引入v8模块 const v8 = require('v8');\n手动触发垃圾回收 v8.setFlagsFromString('--expose-gc'); global.gc();\n获取内存占用信息 const heap = v8.getHeapStatistics(); console.log(heap);\ngetHeapStatistics()方法返回一个包含有关V8堆内存使用情况的对象，包括总内存使用量，已分配内存量，垃圾回收次数等信息。通过这些信息，可以分析出程序的内存占用情况并进行优化。\n注意：使用v8模块需要在启动Node.js时使用--expose-gc选项启用垃圾回收器的暴露功能。node --expose-gc app.js\n","date":"2023-03-26T18:50:50+08:00","permalink":"/p/nodejs/","title":"Nodejs"},{"content":" Obsidian上的主题样式非常多, 我之前使用了 typora_vue 这个主题, 并且直接修改了下载后的文件,但这样会在升级后被覆盖 其实官方提供了一个设置的地方, 可以让我们覆盖样式, 就是 外观--css代码片段, 把自己的css样式文件放到指定文件夹就行, 不影响原主题的升级, 想取消把开关关闭即可 直接打开开发工具view-Toggle Developer Tools, 按自己的需求写css就行 写的css不是很满意, 但懒得找全局变量和优化了, 不想花太多时间在工具上了 提供下我自己的样式:\n给官方的大纲功能添加序号 效果如下:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 /* container of first layer headings. */ .outline { counter-reset: rootCounter; } .outline .tree-item .tree-item-self .tree-item-inner::before { content: counters(rootCounter, \u0026#34;.\u0026#34;) \u0026#34;. \u0026#34;; counter-increment: rootCounter; } /* container of the ohter headings. */ /* NOTE: It is not .outline anymore. So we need a new counter */ .outline .tree-item-children { counter-reset: innerCounter; } .outline .tree-item-children .tree-item .tree-item-self .tree-item-inner::before { content: counters(rootCounter, \u0026#34;.\u0026#34;) \u0026#34;.\u0026#34; counters(innerCounter, \u0026#34;.\u0026#34;) \u0026#34;. \u0026#34;; counter-increment: innerCounter; } 让typora-vue的h标签提示常驻, 其实就是把原主题的:hover选择器去掉 效果如下:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 /*Header BEGIN*/ .markdown-preview-view h1, .markdown-preview-view h2, .markdown-preview-view h3, .markdown-preview-view h4, .markdown-preview-view h5, .markdown-preview-view h6{ position:relative; } .markdown-preview-view h1::before, .HyperMD-header .cm-header-1::before{ content: \u0026#39;h1\u0026#39;; position: absolute; font-size: 10px; color: rgb(56 132 255); font-weight: 400; width: auto; left: -19px; border: 1px solid; padding: 0px 2px; border-radius: 3px; top: 1px; } .markdown-preview-view h2::before, .HyperMD-header .cm-header-2::before{ content: \u0026#39;h2\u0026#39;; position: absolute; font-size: 10px; color: rgb(56 132 255); font-weight: 400; width: auto; margin: 0; left: -20px; border: 1px solid; padding: 0px 2px; border-radius: 3px; top: -4px; } .markdown-preview-view h3::before, .HyperMD-header .cm-header-3::before{ content: \u0026#39;h3\u0026#39;; position: absolute; font-size: 10px; color: rgb(56 132 255); font-weight: 400; width: auto; margin: 0; left: -20px; border: 1px solid; padding: 0px 2px; border-radius: 3px; top: -6px; } .markdown-preview-view h4::before, .HyperMD-header .cm-header-4::before{ content: \u0026#39;h4\u0026#39;; position: absolute; font-size: 10px; color: rgb(56 132 255); font-weight: 400; width: auto; margin: 0; left: -21px; border: 1px solid; padding: 0px 2px; border-radius: 3px; top: -8px; } .markdown-preview-view h5::before, .HyperMD-header .cm-header-5::before{ content: \u0026#39;h5\u0026#39;; position: absolute; font-size: 10px; color: rgb(56 132 255); font-weight: 400; width: auto; margin: 0; left: -20px; border: 1px solid; padding: 0px 2px; border-radius: 3px; top: -11px; } .markdown-preview-view h6::before, .HyperMD-header .cm-header-6::before{ content: \u0026#39;h6\u0026#39;; position: absolute; font-size: 10px; color: rgb(56 132 255); font-weight: 400; width: auto; margin: 0; left: -20px; border: 1px solid; padding: 0px 2px; border-radius: 3px; top: -11px; } /*Header END*/ 更改字体加粗效果, 原主题的加粗看不清. 把无序列表的小圆点改了下外观, 二级三级的和一级的不一样(没四级了). 激活文件的图标高亮颜色. 效果如下:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 /* 加粗字体 */ .cm-strong { font-weight:800; } /* 列表样式 */ .list-bullet:after { width:6px; height:6px; background-color:var(--text-normal); } .cm-list-2 .list-bullet:after { width:4px; height:4px; border-radius: 50%; background: none; border: 1px solid var(--text-normal); } .cm-list-3 .list-bullet:after { width:5px; height:5px; border-radius:0; background-color:rgba(0, 0, 0, 0.5); } /* 激活文件图标颜色 */ .nav-file-title.is-active .obsidian-icon-folder-icon svg { fill: rgb(56 132 255); } ","date":"2023-03-24T12:20:52+08:00","permalink":"/p/obsidian_theme_setting/","title":"Obsidian_个性化主题"},{"content":"2023年, Obsidian完全可以替代Typora了 Typora 缺点 macos+intel, Typora在所见所得的模式下, 只要内容一多, 就会开始卡顿,切换到源码模式就不卡了\n搜了下, 可能是自带WebKit的原因\ntypora会在换行时插入空白行, 类似的还有渲染时会忽略一些格式, 导致你在预览模式下是正常的, 但发布到博客, 或者用vscode打开, 会发现很多格式不规范, 例如缩进 换行 对齐\n免费版停止在0.98, 不会有新功能, arch上安装旧版本也比较麻烦\n优点 表格非常好用\n和picgo整合的图片上传功能非常好用\nObsidian 优点 免费\n所见所得模式下比Typora流畅多了\n有丰富的插件市场\n双链(我没用这功能)\n把整个文件夹同步(例如放到onedrive里), 配置也跟着同步\n多窗口, 多标签模式\n缺点 像vscode一样, 如果是从Typora迁移过来, 默认初始配置会觉得不顺手\n市场插件太多了, 有点难挑\n插件 可以看下开发者的文章 两年后，我还在用的 Obsidian 插件\n说下我自己在用的:\nAuto Link Title: 粘贴链接时自动获取网页标题\nClear Unused Images Collapse All: 自动清除不再使用的图片\nCommander: 添加快捷图标, 点击时使用指定命令\nEasy Typing: 格式化类\nExcalidraw: 画图, 类似draw, 手绘风\nHider: 隐藏不需要的菜单\nHover Editor: 悬浮窗口模式\nIcon Folder: 给文件夹或者文件添加图标\nImage auto upload Plugin Local Images Plus: 类似typora结合picgo上传图片\nObsidian42 - BRAT: 安装非官方市场插件\nPandoc Plugin: 导出其他格式\nQuiet Outline: 大纲\nRecent Files: 最近打开的文件\nTable Enhancer: 表格增强(终于接近typora了)\n主题 当然是类似Typora的 Typora-vue\n顺便改下, 把h标签hover选择器去掉, 把颜色改成高亮颜色, 让它常驻\n1 .markdown-preview-view h1::before 自定义css 给outline 添加数字序号\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 /* container of first layer headings. */ .outline { counter-reset: rootCounter; } .outline .tree-item .tree-item-self .tree-item-inner::before { content: counters(rootCounter, \u0026#34;.\u0026#34;) \u0026#34;. \u0026#34;; counter-increment: rootCounter; } /* container of the ohter headings. */ /* NOTE: It is not .outline anymore. So we need a new counter */ .outline .tree-item-children { counter-reset: innerCounter; } .outline .tree-item-children .tree-item .tree-item-self .tree-item-inner::before { content: counters(rootCounter, \u0026#34;.\u0026#34;) \u0026#34;.\u0026#34; counters(innerCounter, \u0026#34;.\u0026#34;) \u0026#34;. \u0026#34;; counter-increment: innerCounter; } ","date":"2023-03-01T19:29:22+08:00","permalink":"/p/obsidian_instead_typora/","title":"2023年, Obsidian完全可以替代Typora了"},{"content":"vim取消鼠标移动光标模式 vim普通用户加载的配置文件路径为~/.vimrc\nvim管理员用户加载的配置文件路径为/etc/vimrc\n问题点:添加配置set mouse=\u0026quot;\u0026quot;在切换到管理员时不生效\n解决方法: 修改默认配置文件\n1 2 3 4 5 6 7 sudo vim # 输入命令 :echo $VIMRUNTIME # cd进入目录, 找到default.vim文件 sudo vim default.vim # 找到 set mouse=a # 用\u0026#34;注释掉 ","date":"2023-01-27T23:44:44+08:00","permalink":"/p/vim_mouse_mode/","title":"Vim取消鼠标移动光标模式"},{"content":"Vscode Vim模式下切换输入法状态 操作系统: linux arch\n输入法: fcitx5+rime\n目的: 在vscode的命令和插入模式下, 能自动切换中英文输入法\n官方为mac和windown提供建议, 安装im-select, 但linux下并没有\n查看im-selectreadme, 说法是linux有自己的切换工具,并不需要\n方法一:\n添加到vscode config文件中:\n1 2 3 4 5 6 // 在输入法中切换 // 保证fcitx5-configtool设置英文为第一输入法,rime为第二输入法 \u0026#34;vim.autoSwitchInputMethod.enable\u0026#34;: true, \u0026#34;vim.autoSwitchInputMethod.defaultIM\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;vim.autoSwitchInputMethod.obtainIMCmd\u0026#34;: \u0026#34;/usr/bin/fcitx5-remote\u0026#34;, \u0026#34;vim.autoSwitchInputMethod.switchIMCmd\u0026#34;: \u0026#34;/usr/bin/fcitx-remote5 -t {im}\u0026#34;, 方法二:\n来源: rime issue\n1 2 3 4 5 6 // 只是切换rime的中英文 // 并没有切换输入法 \u0026#34;vim.autoSwitchInputMethod.enable\u0026#34;: true, \u0026#34;vim.autoSwitchInputMethod.defaultIM\u0026#34;: \u0026#34;b true\u0026#34;, \u0026#34;vim.autoSwitchInputMethod.obtainIMCmd\u0026#34;: \u0026#34;/usr/bin/busctl call --user org.fcitx.Fcitx5 /rime org.fcitx.Fcitx.Rime1 IsAsciiMode\u0026#34;, \u0026#34;vim.autoSwitchInputMethod.switchIMCmd\u0026#34;: \u0026#34;/usr/bin/busctl call --user org.fcitx.Fcitx5 /rime org.fcitx.Fcitx.Rime1 SetAsciiMode {im}\u0026#34;, 随意选一种即可.我喜欢方法二.\n","date":"2023-01-25T21:31:49+08:00","permalink":"/p/vscode_vimmode_switch_im/","title":"Vscode Vim模式下切换输入法状态"},{"content":"正向|反向|透明 代理 正向代理 正向代理是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端必须设置正向代理服务器，当然前提是要知道正向代理服务器的IP地址，还有代理程序的端口。\n常见用途:\n访问原本无法反问的服务器: 例如梯子\ngraph LR A(用户) --\u003e B{代理} A -.墙.-\u003e C B --\u003e C[(服务器)] 加速访问服务器: 例如用户-\u0026gt;代理, 代理-\u0026gt;服务器带宽更高\ncache: 例如 A用户通过代理访问服务器, B用户通过代理访相同资源命中cache, 不用再访问服务器\n客户端访问授权: 例如作为防火墙来判断能否连外网\ngraph LR A(用户A) --\u003e C{代理} B(用户B) --\u003e C C --\u003e D[(网络)] 隐藏访问者的行踪: 服务器并不知道是用户访问了自己, 而以为是代理服务器, 代理服务器也可以叫\u0026quot;肉鸡\u0026quot;\n反向代理 客户端向反向代理的命名空间(name-space)中的内容发送普通请求，接着反向代理将判断向何处(原始服务器)转交请求，并将获得的内容返回给客户端，就像这些内容原本就是它自己的一样.\n反向代理结论与正向代理正好相反，对于客户端而言它就像是原始服务器，并且客户端不需要进行任何特别的设置。\n常见用途:\n保护和隐藏原始资源服务器:\ngraph LR a(用户) --\u003e b[(反向代理服务器)] subgraph identifier[\" \"] c[防火墙] --\u003e d[(资源服务器)] end b--\u003e c 负载均衡: 当反向代理服务器不止一个的时候, 甚至可以做成集群,让不同的代理服务器去响应不同的用户,当代理服务器具备cache功能, 且用户和代理服务器在同一个网络,就能得到高质量的速度,这就是CDN的核心.\ngraph RL g[(资源服务器)] --\u003e d[(反向代理服务器D)] --\u003e a(用户A) g[(资源服务器)] --\u003e e[(反向代理服务器E)] --\u003e b(用户B) g[(资源服务器)] --\u003e f[(反向代理服务器F)] --\u003e c(用户C) 透明代理 客户端根本不需要知道有代理服务器的存在，它改编你的request fields（报文），并会传送真实IP。\n常见用途:\n行为管理工具: 例如某信服 graph LR subgraph identifier[\" \"] a(用户A) --\u003e c[交换机] --\u003e d[(行为管理工具)] b(用户B) --\u003e c[交换机] end d --\u003e e[(互联网)] ","date":"2023-01-24T10:41:18+08:00","permalink":"/p/proxy/","title":"正向|反向|透明代理"},{"content":"linux ssh remote到mac记住密码 在linux上生成ssh-keygen\n1 2 3 cd ~/.ssh ssh-kengen -t rsa -f ./mac_id_rsa # man ssh-keygen 修改config文件\n1 2 3 4 5 6 7 8 vim config # 添加以下内容 Host mac HostName 你的mac的ip User 你的mac上的用户名 PreferredAuthentications publickey IdentityFile ~/.ssh/mac_id_rsa StrictHostKeyChecking=no 把公钥mac_id_rsa.pub复制到mac上, 同样放到~/.ssh\n把公钥文件导入到~/.ssh/authorized_keys\n1 cat mac_id_rsa.pub \u0026gt;\u0026gt; authorized_keys 注意事项:\n文件权限 config: 600 私钥: 600 公钥: 644 ","date":"2023-01-22T00:48:41+08:00","permalink":"/p/vscode_remote_rember_password/","title":"Vscode Remote记住密码"},{"content":"arch安装deb包 1 2 3 4 5 6 7 8 #　安装debtap yay -S debtap # 更新debtap数据库 sudo debtap -u # 使用debtap转换deb包 debtap xxx.deb # 安装 sudo pacman -U xxx.pkg 转typora免费版0.9.8失败 gir1.2-gnomekeyring-1.0改为gnome-keyring\n","date":"2023-01-22T00:41:45+08:00","permalink":"/p/arch_install_debbian_package/","title":"Arch安装deb包"},{"content":"vscode等宽字体选择:更纱黑体 下载链接 GitHub - be5invis/Sarasa-Gothic: Sarasa Gothic / 更纱黑体 / 更紗黑體 / 更紗ゴシック / 사라사 고딕\n一般安装哪些字体 一般下载微调字体(不带unhinted), 想部分安装就ttf, 选sc简体中文, 编程安装mono, 系统ui更改安装UI, 文章阅读安装gothic\n为什么选择中英文等宽 两个英文符号宽度等于一个中文汉字宽度, 在编辑器或者终端里能很好地对齐\nReleases里的版本说明 ttf和ttc ttf－TrueType字体文件格式 ttc－TrueType字体集文件格式（更纱黑体按照字重进行分类，合并了相近ttf字体文件） 下载哪个?\n数量: ttf解压后几十个字体安装包, ttc下载解压后只有10个(安装后在字体管理里能看到所有字体)\n大小: ttf全部安装比ttc体积大, 但能选择部分安装\n希望大而全的选ttc, 部分安装的选ttf\nunhinted 无微调字体\n字体微调（FontHinting）是一种字形渲染技术，主要用来对字体显示进行优化，解释起来可能复杂费解。简单说吧，它的主要目的就是在字体显示的时候通过某种技术，对字体的笔画曲线进行调整，将字体显示的更加美观。\n对linux来说，字体微调可以分为字体文件本身自带的微调和系统微调（freetype）。字体本身的微调是字体制作厂商在制作字体时，对单个字体进行的调整，在生成字体时将微调的信息加入字体文件中，这就是为什么我们看更纱黑体的微调字体比起无微调字体要大一些。系统微调就是依靠系统本身的字体渲染引擎对字体进行微调，在linux下主要是就是freetype。 字体微调的直观效果就是，在字体显示时，字体的笔画更加清晰可辨。但是字体文件本身的微调，需要针对一个一个字体进行单独调整。\n需要连字等效果的, 不要选无微调\nGothic/mono/term/UI/fixed 拉丁/希腊/西里尔字符集为 Inter 引号 ( “”) 为全角—— Gothic 引号 ( “”) 窄—— UI 拉丁/希腊/西里尔字符集为 Iosevka 破折号（——）是全宽—— Mono 破折号（——）为半宽—— Term 不连字，破折号（——）为半宽——fixed cl/sc/tc/jk/hc cl－古典汉字字形 sc－简体汉字字形 tc－繁体汉字字形 j－日文汉字字形 k－韩文汉字字形 hc－香港汉字字形 slab 超厚笔划字形\nregular/italic/extralight/light/semibold/bold/extralightitalic/lightitalic/semibolditalic/bolditalic regular－常规字体 italic－斜体字体 extralight－超细字体 light－细体字体 semibold－半粗字体 bold－粗体字体 extralightitalic－超细斜体 lightitalic－细斜字体 semibolditalic－半粗斜体 bolditalic－粗斜字体 不喜欢更纱里的英文? 暂时只发现可以和 ubuntu mono结合使用\nvscode设置 1 2 \u0026#34;editor.fontLigatures\u0026#34;: true, // 是否启用字体连字 \u0026#34;editor.fontFamily\u0026#34;: \u0026#34;Sarasa Mono SC Nerd,Sarasa Mono SC\u0026#34;, Sarasa Mono SC Nerd Nerd fonts 提供了很多图标字体，特别适合各种Shell/NeoVim/Emacs主题，例如 zsh 的 p10k, Powerline 等等。\nGitHub - laishulu/Sarasa-Mono-SC-Nerd\n其他nerd-fonts\n其他方案 思源黑体hw JetBrains Mono 不支持中文等宽 Maple-font : 不喜欢花体不要装italic (推荐) ","date":"2023-01-22T00:35:35+08:00","permalink":"/p/vscode_mono_font/","title":"Vscode 等宽字体"},{"content":"bspwm添加全部浮动的空间 例如: 希望添加到第10号的空间全部都是浮动的\n把下面的脚本添加进bspwmrc中\n1 2 3 4 5 6 7 8 9 #! /bin/bash FLOATING_DESKTOP_ID=$(bspc query -D -d \u0026#39;^10\u0026#39;) bspc subscribe node | while read -a msg ; do desk_id=${msg[2]} wid=${msg[3]} [ \u0026#34;$FLOATING_DESKTOP_ID\u0026#34; = \u0026#34;$desk_id\u0026#34; ] \u0026amp;\u0026amp; bspc node \u0026#34;$wid\u0026#34; -t floating done ","date":"2023-01-21T19:14:54+08:00","permalink":"/p/bspwm_floating_space/","title":"bspwm添加全部浮动的空间"},{"content":"arch 使用蓝牙 环境: endeavouros bspwm社区版\n1 2 3 4 5 6 # 一般已经安装了 sudo pacman -S bluez bluez-utils sudo systemctl enable bluetooth.service sudo systemctl start bluetooth.service # pulseaudio-bluetooth不用安装,有pipewire-pulse # pavucontrol 音量图形化管理,一般已经安装了 1 2 3 4 systemctl start bluetooth systemctl enable bluetooth systemctl start --user pipewire-pulse systemctl enable --user pipewire-pulse 命令方式:(建议直接用blueman)\n1 2 3 4 5 6 7 8 9 10 11 12 13 bluetoothctl # 进入蓝牙管理工具环境 [bluetooth]# power on 打开蓝牙 [bluetooth]# agent on 开启代理 [bluetooth]# scan on 扫描蓝牙设备 [bluetooth]# pair xx:xx:xx:... 配对该设备 [bluetooth]# trust xx:xx:xx:... 信任该设备 [bluetooth]# connect xx:xx:... 连接该设备 [bluetooth]# disconnect xx:xx:... 断开蓝牙 [bluetooth]# help 查看帮助信息 [bluetooth]# show 查看本机蓝牙信息 [bluetooth]# discoverable yes 设置蓝牙可被发现 [bluetooth]# info xx:xx:xx:... 查看该蓝牙设备的信息 1 2 # 安装图形管理界面 sudo pacman -S blueman ","date":"2023-01-21T18:55:01+08:00","permalink":"/p/arch_bluetooth/","title":"arch 使用蓝牙"},{"content":"arch 直接装 endeavouros , 省事， 官方提供了中国的镜像下载， 修改软件源后选择的在线安装 bspwm社区版\n参考教程：\nhttps://www.bilibili.com/read/cv17475290/\nhttps://wiki.archlinux.org/title/Installation_guide_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)\ndotfiles 壁纸 登录器壁纸： /etc/lightdm/slick-greeter.conf\n桌面壁纸: nitrogen默认配置路径~/.config/nitrogen/\nyay 1 sudo pacman -S yay vscode zsh终端里的特殊图标变方块 更换支持图标的字体\n1 yay -S nerd-fonts-sarasa-term # 带图标补丁的等距更纱黑体 vim 设置默认编辑器 1 2 3 4 5 6 # 查看软件安装路径 whereis vim # 查看默认编辑器 echo $EDITOR # 设置为vim export EDITOR=/usr/bin/vim vim设置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 # 在vim编辑器中， 输入:set nu, 取消:set nonu # 默认显示 vim ~/.vimrc === \u0026#34;显示行号 set nu \u0026#34;启动时隐去援助提示 set shortmess=atI \u0026#34;语法高亮 syntax on \u0026#34;搜索高亮 set hlsearch \u0026#34;显示匹配 set showmatch \u0026#34;搜索忽略大小写 set ic \u0026#34;显示文件名和路径 set laststatus=2 \u0026#34;文件自动检测外部更改 set autoread \u0026#34;自动对齐 set autoindent \u0026#34;智能缩进 set smartindent \u0026#34;浅色显示当前行 autocmd InsertLeave * se nocul \u0026#34;用浅色高亮当前行 autocmd InsertEnter * se cul \u0026#34;显示输入的命令 set showcmd \u0026#34;错误时屏幕不要闪烁 set novisualbell \u0026#34;显示标尺，就是在右下角显示光标位置 set ruler \u0026#34;鼠标可用 \u0026#34;set mouse=a \u0026#34;共享剪切板 set clipboard^=unnamed,unnamedplus === 和系统剪切板互通 1 2 3 4 vim --version| grep \u0026#34;clipboard\u0026#34; # +clipboard，不支持则会是 -clipboard # 安装gvim sudo pacman -S gvim 强制保存只读文件 1 :w !sudo tee % 编辑模式下的光标样式 https://vim.fandom.com/wiki/Change_cursor_shape_in_different_modes\nxfce4-terminal对应的设置:\n1 2 3 4 5 6 7 8 9 10 11 vim ~/.vimrc #### if has(\u0026#34;autocmd\u0026#34;) au InsertEnter * silent execute \u0026#34;!sed -i.bak -e \u0026#39;s/TERMINAL_CURSOR_SHAPE_BLOCK/TERMINAL_CURSOR_SHAPE_IBEAM/\u0026#39; ~/.config/xfce4/terminal/terminalrc\u0026#34; au InsertLeave * silent execute \u0026#34;!sed -i.bak -e \u0026#39;s/TERMINAL_CURSOR_SHAPE_IBEAM/TERMINAL_CURSOR_SHAPE_BLOCK/\u0026#39; ~/.config/xfce4/terminal/terminalrc\u0026#34; au VimLeave * silent execute \u0026#34;!sed -i.bak -e \u0026#39;s/TERMINAL_CURSOR_SHAPE_UNDERLINE/TERMINAL_CURSOR_SHAPE_IBEAM/\u0026#39; ~/.config/xfce4/terminal/terminalrc\u0026#34; endif #### # UNDERLINE是下划线 # IBEAM是竖线 # BLOCK是方块 启动vim，不加载.vimrc vim -u NONE -N\nvim自动切换输入法 https://wiki.archlinuxcn.org/wiki/Fcitx5\n安装fcitx.vim插件\n或者添加以下代码\n1 2 3 4 5 6 7 8 vim ~/.vimrc #### let fcitx5state=system(\u0026#34;fcitx5-remote\u0026#34;) \u0026#34; 退出插入模式时禁用输入法，并保存状态 autocmd InsertLeave * :silent let fcitx5state=system(\u0026#34;fcitx5-remote\u0026#34;)[0] | silent !fcitx5-remote -c \u0026#34; 2 表示之前状态打开了输入法，则进入插入模式时启动输入法 autocmd InsertEnter * :silent if fcitx5state == 2 | call system(\u0026#34;fcitx5-remote -o\u0026#34;) | endif #### 另一种只切换rime中英文的方法\n1 2 3 4 5 6 if has(\u0026#34;autocmd\u0026#34;) \u0026#34;刚进入vim就切换成英文 :silent call system(\u0026#34;busctl call --user org.fcitx.Fcitx5 /rime org.fcitx.Fcitx.Rime1 SetAsciiMode b true\u0026#34;) \u0026#34;退出插入模式切换成英文 au InsertLeave * :silent call system(\u0026#34;busctl call --user org.fcitx.Fcitx5 /rime org.fcitx.Fcitx.Rime1 SetAsciiMode b true\u0026#34;) endif 关闭鼠标移动光标模式 1 2 3 4 5 6 7 8 9 # 普通用户 vim ~/.vimrc set mouse=\u0026#34;\u0026#34; # 管理员 vim :echo $VIMRUNTIME # 进入目录 # 修改default文件 # 把set mouse=a用\u0026#34;注释掉 shell 查看系统下的shell 1 2 3 4 cat /etc/shells echo $SHELL # 设置默认shell为zsh chsh -s /bin/zsh zsh插件 选择更加轻量的prezto框架\n1 2 # 安装prezto框架 # 主题推荐: powerlevel10k su root和su - root su root 获取root的执行权限，没有改变用户环境\nsu - root 切换root用户，更改环境变量\npacman 添加软件源(arch系) 包括archlinux和 archlinuxcn源\nps: 2022/9/21 清华源失败， 中科源可用\n官方文档\n编辑 /etc/pacman.d/mirrorlist ，在文件的最顶端添加\n1 Server = https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch 在 /etc/pacman.conf 文件末尾添加两行：\n1 2 [archlinuxcn] Server = https://mirrors.ustc.edu.cn/archlinuxcn/$arch 然后请安装 archlinuxcn-keyring 包以导入 GPG key。\n1 sudo pacman -S archlinuxcn-keyring `sudo pacman -Sy'\n(可选)arhclinuxcn 添加多个源 1 sudo pacman -S archlinuxcn-mirrorlist-git 1 2 3 4 5 sudo vim /etc/pacman.conf =========== [archlinuxcn] Include = /etc/pacman.d/archlinuxcn-mirrorlist =========== 1 2 sudo vim /etc/pacman.d/archlinux-mirrorlist #去掉使用的地址的注释即可 (可选)镜像源排序 先备份 /etc/pacman.d/mirrorlist\n1 cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.bak 下面命令将过滤官方镜像列表中的前 5 个镜像，按速度排列并覆盖 /etc/pacman.d/mirrorlist\n1 reflector -l 5 --sort rate --save /etc/pacman.d/mirrorlist 下面这个命令会从官方镜像列表中获取200个最近同步过的源，并对这200个源进行大文件下载来，根据在你电脑里的下载速度进行排序，写入mirrorlist（强烈推荐）\n1 reflector --verbose -l 200 -p http --sort rate --save /etc/pacman.d/mirrorlist 换源后要清理缓存 1 2 3 4 # 清理所有缓存文件 pacman -Scc # 强制更新源列表 pacman -Syy (可选)pacman 包图形管理工具 pacman-manager\npacman 安装提示签名未知 1 2 3 4 5 6 7 8 9 10 vim /etc/pacman.conf # 原来的配置 [archlinuxcn] SigLevel = Optional TrustedOnly # 新的配置 # SigLevel = Optional TrustedOnly SigLevel = Never # 害怕安全问题, 可以安装后再改回来 安装中文输入法 1 2 3 sudo pacman -S fcitx5 fcitx5-gtk fcitx5-qt fcitx5-rime fcitxt5-configtool # 安装颜色主题 pacman -S fcitx5-material-color fitix5 rime 配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 # 到小鹤官网下载配置 # 小鹤部署目录 ~/.local/share/fcitx5/rime # 修改主题 vim ~/.config/fcitx5/conf/classicui.conf #### # 垂直候选列表 Vertical Candidate List=False # 按每个屏幕 DPI 显示 PerScreenDPI=True # 使用鼠标滚轮翻页 WheelForPaging=True # 字体 Font=\u0026#34;Sans 14\u0026#34; # 菜单字体 MenuFont=\u0026#34;Sans 14\u0026#34; # 托盘字体 TrayFont=\u0026#34;Sans Bold 14\u0026#34; # 托盘标签轮廓颜色 TrayOutlineColor=#000000 # 托盘标签文本颜色 TrayTextColor=#ffffff # 优先使用文字图标 PreferTextIcon=False # 在图标中显示布局名称 ShowLayoutNameInIcon=True # 使用输入法的语言来显示文字 UseInputMethodLangaugeToDisplayText=True # 主题 Theme=Material-Color-Blue # 固定 Wayland 的字体 DPI ForceWaylandDPI=0 #### 环境变量 1 2 3 4 5 6 7 8 9 10 sudov vim /etc/environment #### INPUT_METHOD=fcitx5 GTK_IM_MODULE=fcitx5 QT_IM_MODULE=fcitx5 XMODIFIERS=\\@im=fcitx5 SDL_IM_MODULE=fcitx5 GLFW_IM_MODULE=ibus #### # GLFW_IM_MODULE 是为了让 kitty 启用输入法支持。此环境变量的值只能为 ibus。 取消rime F4 快捷键 修改default.custom.yaml\n1 2 3 patch: switcher/hotkeys: - noop 开机启动 1 cp /usr/share/applications/org.fcitx.Fcitx5.desktop ~/.config/autostart/ 桌面配置 配置文件: https://github.com/jqtmviyu/dotfiles\nbspwm 配置文件参考：\nhttps://github.com/arcolinux/arcolinux-bspwm\nhttps://github.com/EndeavourOS-Community-Editions/bspwm\n教程参考:\nhttps://wiki.archlinux.org/title/Bspwm\nhttps://www.bilibili.com/read/cv7417123/\nhttps://github.com/baskerville/bspwm/wiki\nhttps://dev.to/l04db4l4nc3r/bspwm-a-bare-bones-window-manager-44di\nbspwm的开机启动项: /usr/share/xsessions/bspwm.desktop\n获取类名 安装xorg-xprop\nxprop | grep WM_CLASS\n窗口规则属性: hidden - 隐藏且不占用任何平铺空间。 sticky - 停留在其监视器的聚焦桌面上。 private - 尝试保持相同的平铺位置/大小。 locked - 忽略node \u0026ndash;close消息。 marked - 已标记（对延迟操作有用）。标记的节点在发送到预选节点后变为未标记。 center - 中心窗口 if state=floating。 follow - 更改为窗口的监视器/桌面。 manage - 窗口被管理。非托管窗口不是树的一部分。 focus - 聚焦窗口。 border - 窗口边框的可见性。 浮动窗口 移动: 按住super+鼠标左键\n调整大小: 按住super+鼠标右键\n只有一个窗口时去掉间隙 bspc config single_monocle true\n浮动模式的空间 1 2 3 4 5 6 7 8 9 #! /bin/bash FLOATING_DESKTOP_ID=$(bspc query -D -d \u0026#39;^10\u0026#39;) bspc subscribe node | while read -a msg ; do desk_id=${msg[2]} wid=${msg[3]} [ \u0026#34;$FLOATING_DESKTOP_ID\u0026#34; = \u0026#34;$desk_id\u0026#34; ] \u0026amp;\u0026amp; bspc node \u0026#34;$wid\u0026#34; -t floating done 全部配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 vim ~/.config/bspwm/bspwmrc ==== #! /bin/sh if pgrep firewall-applet \u0026amp;\u0026gt; /dev/null;then pkill firewall-applet;fi \u0026amp; pgrep -x sxhkd \u0026gt; /dev/null || sxhkd \u0026amp; bspc monitor -d I II III IV V VI VII VIII IX X bspc config border_width 4 bspc config window_gap 12 bspc config split_ratio 0.52 bspc config borderless_monocle true bspc config gapless_monocle true bspc config pointer_follows_focus true bspc config focus_follows_pointer true # bspc rule -a Gimp desktop=\u0026#39;^8\u0026#39; state=floating follow=on bspc rule -a Thunar desktop=\u0026#39;^3\u0026#39; follow=on bspc rule -a mplayer2 state=floating bspc rule -a Yad state=floating bspc rule -a Kupfer.py focus=on # bspc rule -a flameshot manage=off bspc rule -a flameshot state=floating bspc rule -a xfce4-power-manager state=floating bspc rule -a copyq state=floating follow=on # Border bspc config focused_border_color \u0026#34;#6c71c4\u0026#34; bspc config normal_border_color \u0026#34;#073642\u0026#34; bspc config active_border_color \u0026#34;#073642\u0026#34; # # Autostart # # Set display from arandr saved script sh ~/.screenlayout/monitor.sh \u0026amp; # Bar flameshot \u0026amp; # xfce4-power-manager \u0026amp; ~/.config/polybar/launch.sh \u0026amp; # Notifications /usr/bin/dunst \u0026amp; # Polkit /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1 \u0026amp; # Wallpaper nitrogen --restore \u0026amp; # Dex dex -a -s /etc/xdg/autostart/:~/.config/autostart/ \u0026amp; # Picom picom -b \u0026amp; # Network Applet nm-applet --indicator \u0026amp; # Cursor xsetroot -cursor_name left_ptr \u0026amp; # Low battery notifier ~/.config/bspwm/scripts/low_bat_notifier.sh ==== polybar bspwm启动脚本\n1 ~/.config/polybar/launch.sh 配置文件\n1 ~/.config/polybar/config.ini https://github.com/polybar/polybar/wiki/Configuration\nfont-0 # 配置是索引1对应的字体，后面要用到该字体，直接用=1 modules-left modules-center modules-right : 对应三个区域的模块，spa是空隙，具体模块看wiki 修改的地方：\n1 2 modules-left = powermenu sps bspwm sps keyhint sps sps title modules-right =netspeed sps cpu sps memory sps temperature sps filesystem sps backlight sps pulseaudio sps date bspwm配置查看模块 鼠标左键查看bspwm, 右键查看sxhkd\n1 2 3 4 5 6 7 8 [module/keyhint] type = custom/text content = \u0026#34;\u0026#34; click-left = xfce4-terminal -e \u0026#34;vim -R /home/$USER/.config/bspwm/bspwmrc\u0026#34; click-right = xfce4-terminal -e \u0026#34;vim -R /home/$USER/.config/sxhkd/sxhkdrc\u0026#34; content-foreground = ${colors.blue-darker} content-padding = 1 margin-right = 0 网速模块 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 [module/netspeed] type = internal/network ; Set correct interface name for the module to work ; Try eth0 for ethernet or wlan0 for wireless ; ; You can also run \u0026#39;ip link\u0026#39; in a terminal ; to know the interace names on your system. interface = wlan0 interval = 3 label-connected = \u0026#34;%{T1}龍%{T-}%{T2}%downspeed:8%%{T-}\u0026#34; label-disconnected = \u0026#34;%{T2}⚠ %{T-}\u0026#34; label-connected-background = ${colors.bg} label-connected-foreground = ${colors.blue} label-disconnected-foreground = ${colors.red} cpu占用模块 1 2 3 4 5 6 7 8 9 [module/cpu] type = internal/cpu ; Seconds to sleep between updates ; Default: 1 interval = 0.5 label = %{T1}%{T-}%{T2} %percentage:2%%%{T-} label-foreground = ${colors.blue} RAM占用模块 1 2 3 4 5 6 7 8 [module/memory] type = internal/memory interval = 0.5 format = \u0026lt;label\u0026gt; label = %{T1}%{T-}%{T2} %percentage_used%%%{T-} label-foreground = ${colors.blue} 温度模块 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 [module/temperature] type = internal/temperature ; Seconds to sleep between updates ; Default: 1 interval = 1 ; Thermal zone to use ; To list all the zone types, run ; $ for i in /sys/class/thermal/thermal_zone*; do echo \u0026#34;$i: $(\u0026lt;$i/type)\u0026#34;; done ; Default: 0 thermal-zone = 0 ; Full path of temperature sysfs path ; Use `sensors` to find preferred temperature source, then run ; $ for i in /sys/class/hwmon/hwmon*/temp*_input; do echo \u0026#34;$(\u0026lt;$(dirname $i)/name): $(cat ${i%_*}_label 2\u0026gt;/dev/null || echo $(basename ${i%_*})) $(readlink -f $i)\u0026#34;; done ; to find path to desired file ; Default reverts to thermal zone setting hwmon-path = /sys/devices/platform/coretemp.0/hwmon/hwmon3/temp1_input ; Base temperature for where to start the ramp (in degrees celsius) ; Default: 0 base-temperature = 0 ; Threshold temperature to display warning label (in degrees celsius) ; Default: 80 warn-temperature = 80 label = %{T1}%{T-}: %{T2}%temperature-c%%{T-} label-warn = %{T1}%{T-}: %{T2}%temperature-c%%{T-} label-foreground = ${colors.cyan} label-warn-foreground = ${colors.red} 存储空间占用模块 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 [module/filesystem] type = internal/fs ; Mountpoints to display mount-0 = / ; mount-1 = /home ; mount-2 = /var ; Seconds to sleep between updates ; Default: 30 interval = 10 ; Display fixed precision values ; Default: false fixed-values = true ; Spacing (number of spaces, pixels, points) between entries ; Default: 2 spacing = 1 ; Default: 90 ; New in version 3.6.0 warn-percentage = 75 label-mounted =%{T1}%{T-} %{T2}%percentage_free%%%{T-} label-mounted-foreground = ${colors.cyan} label-mounted-foreground = ${colors.cyan} label-warn-foreground = ${colors.red} 亮度模块 1 2 3 4 5 6 7 8 9 10 11 12 13 # 启用滚动调节亮度功能 # 该目录下的子文件夹名称对应card名 ls -l /sys/class/backlight/ # 手动调试 cd /sys/class/backlight/intel_backlight ls -al # max就是最大亮度 sudo vim brightness # 添加权限 hxx改成你自己的用户组 sudo vim /etc/udev/rules.d/backlight.rules ==== ACTION==\u0026#34;add\u0026#34;, SUBSYSTEM==\u0026#34;backlight\u0026#34;, RUN+=\u0026#34;/bin/chgrp hxx $sys/class/backlight/intel_backlight/brightness\u0026#34;, RUN+=\u0026#34;/bin/chmod g+w $sys/class/backlight/intel_backlight/brightness\u0026#34; ==== 音量模块 滚轮滑动调节音量，左键静音，右键打开配置面板\nsxhkd ~/.config/sxhkd/sxhkdrc\n1 2 3 # 自动切换状态, 浮动和窗口模式, 类似的还有有全屏和窗口 super + shift + space bspc node -t {tiled,floating} 全部配置wm independent hotkeys # # terminal emulator super + Return xfce4-terminal # program launcher super + d rofi -modi drun -show drun -line-padding 4 \\ -columns 2 -padding 50 -hide-scrollbar -terminal xfce4-terminal \\ -show-icons -drun-icon-theme \u0026#34;Qogir-dark\u0026#34; -font \u0026#34;Droid Sans Regular 14\u0026#34; # show open window alt + Tab rofi -modi drun -show window -line-padding 4 \\ -columns 2 -padding 50 -hide-scrollbar -terminal xfce4-terminal \\ -show-icons -drun-icon-theme \u0026#34;Qogir-dark\u0026#34; -font \u0026#34;Droid Sans Regular 14\u0026#34; # show ssh sesssions super + shift + d rofi -modi drun -show ssh -line-padding 4 \\ -columns 2 -padding 50 -hide-scrollbar -terminal xfce4-terminal \\ -show-icons -drun-icon-theme \u0026#34;Qogir-dark\u0026#34; -font \u0026#34;Droid Sans Regular 14\u0026#34; # power-menu super + shift + e ~/.config/rofi/powermenu.sh # make sxhkd reload its configuration files: super + Escape pkill -USR1 -x sxhkd # # bspwm hotkeys # # quit/restart bspwm super + alt + {q,r} bspc {quit,wm -r} # close and kill super + {_,shift + }q bspc node -{c,k} # alternate between the tiled and monocle layout super + m bspc desktop -l next # send the newest marked node to the newest preselected node super + y bspc node newest.marked.local -n newest.!automatic.local # swap the current node and the biggest window super + g bspc node -s biggest.window # # state/flags # # set the window state super + {t,shift + t} bspc node -t {tiled,pseudo_tiled} super + shift + space bspc node -t {floating,tiled} super + f bspc node -t {fullscreen,tiled} # set the node flags super + ctrl + {m,x,y,z} bspc node -g {marked,locked,sticky,private} # focus/swap # # focus the node in the given direction super + {_,shift + }{h,j,k,l} bspc node -{f,s} {west,south,north,east} # focus the node for the given path jump super + {p,b,comma,period} bspc node -f @{parent,brother,first,second} # focus the next/previous window in the current desktop super + {_,shift + }c bspc node -f {next,prev}.local.!hidden.window # focus the next/previous desktop in the current monitor super + bracket{left,right} bspc desktop -f {prev,next}.local # focus the last node/desktop super + {grave,Tab} bspc {node,desktop} -f last # focus the older or newer node in the focus history super + {o,i} bspc wm -h off; \\ bspc node {older,newer} -f; \\ bspc wm -h on # focus or send to the given desktop super + {_,shift + }{1-9,0} bspc {desktop -f,node -d} \u0026#39;^{1-9,10}\u0026#39; # # preselect # # preselect the direction super + ctrl + {h,j,k,l} bspc node -p {west,south,north,east} # preselect the ratio super + ctrl + {1-9} bspc node -o 0.{1-9} # cancel the preselection for the focused node super + ctrl + space bspc node -p cancel # cancel the preselection for the focused desktop super + ctrl + shift + space bspc query -N -d | xargs -I id -n 1 bspc node id -p cancel # # move/resize # # expand a window by moving one of its side outward super + alt + {h,j,k,l} bspc node -z {left -20 0,bottom 0 20,top 0 -20,right 20 0} # contract a window by moving one of its side inward super + alt + shift + {h,j,k,l} bspc node -z {right -20 0,top 0 20,bottom 0 -20,left 20 0} # move a floating window super + {Left,Down,Up,Right} bspc node -v {-20 0,0 20,0 -20,20 0} # # Special hotkeys # # Multimedia keys XF86AudioRaiseVolume amixer -q set Master 5%+ unmute # Still multimedia XF86AudioLowerVolume amixer -q set Master 5%- unmute # still XF86AudioMute amixer -D pulse sset Master toggle-mute # amixer -q set Master toggle # Simple amixer command seems to have problems unmuting device # Brightness up XF86MonBrightnessUp xbacklight -inc 5 # And brightness down XF86MonBrightnessDown xbacklight -dec 5 # Screenshot Print flameshot gui super + Print ~/.config/bspwm/scripts/screenshot.sh # Shortcuts super + s flameshot gui # clipbord super + v copyq toggle super + alt + F1 ~/.config/bspwm/scripts/keybindings_rofi.sh # browser super + F1 google-chrome-stable # vscode super + F2 code # thunar super + F3 thunar picom 非活动窗口透明度调整 1 2 3 4 5 vim ~/.config/picom.conf ===== inactive-opacity = 0.95; active-opacity = 1; ===== 双屏幕显示 Dual monitor setup with BSPWM and Polybar | Protesilaos Stavrou\n用ARandR设置: 外接显示器在左, 自带笔记本屏幕在右 或者用 ranger 命令\n1 2 3 4 xrandr -q # 只显示已连接的 xrandr -q | grep -w connected # 假设这里获取到的两个屏幕分别是本机eDP1和外接显示器HDMI2 设置bspwm 1 2 3 4 5 6 7 8 9 10 11 12 13 # 给外接显示器分配1-9号桌面,给本机分配0号桌面 bspc monitor HDMI2 -d I II III IV V VI VII VIII IX bspc monitor eDP1 -d eDP1 X # 按键绑定时, 是从左桌面开始的(也可以是从上到下) # 假设eDP1在左边, HDMI2在右边, 那么按键1会分配给eDP1 # 所以在设置ARandR时,先把HDMI2移到左边,把eDP1移到右边,那么分配按键时会先从HDMI2开始分配 # 不移动也可以, 那么就得交换(swap)监视 # bspc monitor eDP1 -s HDMI2 # 查看顺序 # bspc query -M # 如果只有两个,直接交换 # bspc monitor -s last 设置polybar Set polybar on multiple screens. · Issue #763 · polybar/polybar · GitHub\n1 2 3 4 5 6 # 修改~/.config/polybar/config.ini # top就是配置名,可以在启动polybar时指定配置,也可以启动多个,但插件似乎只能存在在一个配置 [bar/top] ; monitor = HDMI2 ; monitor-fallback = eDP1 monitor = ${env:MONITOR:} 修改启动脚本 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 vim $HOME/.config/polybar/launch.sh #!/usr/bin/env bash # Terminate already running bar instances killall -q polybar # Wait until the processes have been shut down while pgrep -u $UID -x polybar \u0026gt;/dev/null; do sleep 1; done # Launch Polybar # polybar top -c ~/.config/polybar/config.ini \u0026amp; for m in $(polybar --list-monitors | cut -d\u0026#34;:\u0026#34; -f1); do MONITOR=$m polybar --reload top \u0026amp; done 重新启动polybar 1 2 # 直接重启bspwm, polybar也会跟着重启 # 如果是插拔显示器,需要重新启动polybar 智能化 根据设备自动切换配置 : autorandr\n先在不插显示器和插显示器的模式下, 分别调整显示器布局和保存配置, 下次热插把显示器, 便能自动应用配置, 还能自动执行脚本 1 2 3 4 5 6 yay -S autorandr autorandr -h # 插上显示器并调整布局 autorandr --save hdmi2 # 拔掉显示器并调整布局 autorandr --save laptop 修改 bspwm 默认启动脚本 1 2 # 默认启动时给笔记本显示器分配1-10 bspc monitor eDP1 -d I II III IV V VI VII VIII IX X 添加触发 autorandr 时脚本 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 cd ~/.config/autorandr/hdmi2 vim postswitch === #! /bin/sh sleep 8 nitrogen --restore bspc monitor HDMI2 -d I II III IV V VI VII VIII IX bspc monitor eDP1 -d X === chmod +x postswitch cd ../laptop vim postswitch === #! /bin/sh sleep 8 # nitrogen --restore # bspc monitor eDP1 -d I II III IV V VI VII VIII IX X # bspc config remove_disabled_monitors false # bspc config remove_unplugged_monitors true # bspc config merge_overlapping_monitors false bspc wm -r === chmod +x postswitch 未解决问题点: sh ~/.config/polybar/launch.sh 不能在 autorandr 中添加永久进程, 暂时添加 desktop 用 rofi 启动\n自启动管理 自启动文件夹：/etc/xdg/autostart/和~/.config/autostart\n修改.desktop文件中的Hidden=true来取消启动\n至于bspwm中的， 通过pgrep firewall-applet || firewall-applet避免重复启动\n按键映射(cap_lock) 把cap_lock单击映射为esc, 长按+hjkl 映射为方向键\n使用xev 获得keycode\n1 2 3 4 5 6 7 8 9 yay -S xcape vim ~/.Xmodmap ====== keycode 66 = Mode_switch keysym h = h H Left keysym l = l L Right keysym k = k K Up keysym j = j J Down ====== 1 2 3 4 5 6 7 8 9 10 11 12 vim ~/.config/autostart/keymap.desktop ======== [Desktop Entry] Version=1.0 Type=Application Name=keymap Encoding=UTF-8 Exec=/bin/bash -c \u0026#34;/usr/bin/xmodmap ~/.Xmodmap; xcape -e \u0026#39;Mode_switch=Escape\u0026#39;\u0026#34; Icon=application-default-icon Hidden=false X-GNOME-Autostart-enabled=true ====== ctl_L 键和 alt_L 对换\n1 2 3 4 5 6 7 8 9 10 vim ~/.Xmodmap === remove mod1 = Alt_L remove Control = Control_L keysym Control_L = Alt_L keysym Alt_L = Control_L add mod1 = Alt_L add Control = Control_L === 查看窗口class 安装 xorg-xprop\n1 xprop # 把光标移到窗口上 查看键盘按键对应符号 给sxhkd使用\n安装xorg-xev, 终端输入xev启动\ni3lock 失败锁定的次数 https://wiki.archlinux.org/title/security#Lock_out_user_after_three_failed_login_attempts\n1 2 3 4 /etc/security/faillock.conf. 锁定参数： unlock_time— 锁定时间（以秒为单位，默认为 10 分钟）。 fail_interval— 登录失败可能导致锁定的时间（以秒为单位，默认为 15 分钟）。 deny— 锁定前登录失败的次数（默认 3）。 neofetch 修改logo 1 2 3 vim ~/.bashrc alias neofetch=\u0026#34;neofetch --ascii_distro arch --disable distro\u0026#34; source ~/.bashrc wm桌面高分辨率下设置缩放 资料\nhttps://forum.endeavouros.com/t/xresources-and-scaling/21458/3\nhttps://dougie.io/linux/hidpi-retina-i3wm/\nhttps://forum.endeavouros.com/t/ten-tweaks-for-eos-i3-wm-on-lenovo-with-high-dpi/10363\n字体dpi https://wiki.archlinux.org/title/HiDPI#X_Resources\n1 vim ~/.Xresources 1 2 3 4 5 6 7 8 9 Xft.dpi: 144 Urxvt.font:xft:Sarasa Mono SC Nerd:size=16:style=Regular Xft.autohint: 0 Xft.lcdfilter: lcddefault Xft.hintstyle: hintfull Xft.hinting: 1 Xft.antialias: 1 Xft.rgba: rgb Xcursor.size: 40 修改第一行的dpi和第二行的字体\ndpi 96的时候是100%, 192是200%\ngtk dpi https://wiki.archlinux.org/title/HiDPI#:~:text=QT_FONT_DPI%3D96%20clementine-,GDK%203%20(GTK%203),-Note%3A%20As\n1 vim ~/.profile 1 2 3 4 5 6 7 export GDK_SCALE=1 export GDK_DPI_SCALE=1 export QT_AUTO_SCREEN_SCALE_FACTOR=1 export QT_AUTO_SCREEN_SET_FACTOR=1 export QT_QPA_PLATFORMTHEME=qt5ct export QT_SCALE_FACTOR=1 export QT_FONT_DPI=100 GDK_SCALE 不支持小数缩放, GDK_DPI_SCALE支持小数\n第一个是把界面放大，第二个是把文字缩回去\n生效需要xrdb ~/.Xresources, 并且重启 上面把界面放大了, 需要 xRandR 缩小 1 2 3 4 5 6 xrandr -q xrandr --output eDP1 --scale 1.5x1.5 # 如果还有外接显示器 xrandr --output HDMI2 --pos 3840x0 --scale 2x2 rofi字体大小 1 2 3 4 5 6 7 8 9 10 11 rofi --help vim ~/.config/rofi/config.rasi vim ~/.config/rofi/powermenu.rasi =========== configuration { font: \u0026#34;Sourcecode Pro Regular 26\u0026#34;; window { width: 260px; =========== 通过sxhkd启动的rofi窗口, 需要改sxhkd文件, 字体可能通过参数传递过去的\nrofi透明度改为不透明 1 2 3 4 5 6 vim ~/.config/picom.conf # 添加规则 opacity-rule = [\u0026#34;100:class_g = \u0026#39;Rofi\u0026#39;\u0026#34;]; # 修改rofi的皮肤 # endeavouros 带了一个皮肤 arc_dark_transparent_colors.rasi # 把除了 background-color 的透明度为0， 其他项都改为100% rofi添加程序 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # 程序 xxx.desktop 默认路径 cd /usr/share/applications # 程序的默认安装路径 cd /usr/bin # 程序的默认图标路径 cd /usr/share/icons # 复制已有的改下 #### 参考 [Desktop Entry] Name=Imagine Exec=/home/hxx/下载/AppImages/Imagine.AppImage Terminal=false Type=Application Icon=/home/hxx/下载/AppImages/Imagine.png StartupWMClass=Imagine Comment=PNG/JPEG optimization app #### grub分辨率 1 2 3 4 5 6 sudo vim /etc/default/grub ============= # 上面两条是自动加载上次内核, 没有安装多个内核的不用管 GRUB_GFXMODE=1360x768x32,auto ============= grub-mkconfig -o /boot/grub/grub.cfg grub启动项 1 2 3 4 5 6 7 8 9 10 11 12 13 # 检查内核 Vuname -r # 多个内核设置 sudo vim /etc/default/grub ================== GRUB_DEFAULT=saved GRUB_SAVEDEFAULT=\u0026#34;true\u0026#34; GRUB_TIMEOUT=2 # 倒计时 GRUB_DISABLE_SUBMENU=y GRUB_TIMEOUT_STYLE=\u0026#39;menu\u0026#39; # 如果menu时不出现倒计时, 有可能是插着鼠标, 或者是键盘坏了,在发送按键事件,打断了计时 ==================== grub-mkconfig -o /boot/grub/grub.cfg reboot grub 主题 tela\n清理垃圾 1 2 3 4 sudo journalctl --disk-usage #查看日志大小 sudo journalctl --vacuum-time=5d #超过5天的自动删除 sudo journalctl --vacuum-size=500M #超过500M的自动删除 sudo rm /var/lib/systemd/coredump/* #崩溃日志，文件不多，也不大，删不删随你 feh图片查看器 快捷键\n上下： 缩放\n左右： 上一张下一张\n/: 图片适应窗口\nd: 显示文件名\nm：显示菜单\no: 显示/隐藏鼠标\nq: 退出\nx: 关闭\n默认配置文件\n1 2 3 vim ~/.config/feh/themes feh --scale-down --auto-zom -d --start-at # feh在窗口管理器中有bug, 第一次缩放不正常，按r刷新后正常 建议用gpicview ， 同样很轻量\n设置默认浏览器 ~/.config/mimeapps.list\n1 2 3 4 5 6 [Default Applications] text/html=google-chrome.desktop x-scheme-handler/http=google-chrome.desktop x-scheme-handler/https=google-chrome.desktop x-scheme-handler/about=google-chrome.desktop x-scheme-handler/unknown=google-chrome.desktop 蓝牙 1 2 3 4 5 6 # 一般已经安装了 sudo pacman -S bluez bluez-utils sudo systemctl enable bluetooth.service sudo systemctl start bluetooth.service # pulseaudio-bluetooth不用安装,有pipewire-pulse # pavucontrol 音量图形化管理,一般已经安装了 1 2 3 4 systemctl start bluetooth systemctl enable bluetooth systemctl start --user pipewire-pulse systemctl enable --user pipewire-pulse 命令方式:(建议直接用blueman)\n1 2 3 4 5 6 7 8 9 10 11 12 13 bluetoothctl # 进入蓝牙管理工具环境 [bluetooth]# power on 打开蓝牙 [bluetooth]# agent on 开启代理 [bluetooth]# scan on 扫描蓝牙设备 [bluetooth]# pair xx:xx:xx:... 配对该设备 [bluetooth]# trust xx:xx:xx:... 信任该设备 [bluetooth]# connect xx:xx:... 连接该设备 [bluetooth]# disconnect xx:xx:... 断开蓝牙 [bluetooth]# help 查看帮助信息 [bluetooth]# show 查看本机蓝牙信息 [bluetooth]# discoverable yes 设置蓝牙可被发现 [bluetooth]# info xx:xx:xx:... 查看该蓝牙设备的信息 1 2 # 安装图形管理界面 sudo pacman -S blueman 修改gtk主题 下载: https://www.gnome-look.org/browse/\n使用LXAppearance进行设置, 主题添加到~/.themes 下, 喜欢macos 可以使用 WhiteSur\n笔记本扬声器没有声音 1 2 3 # 取消静音通道 # 默认情况下，ALSA 将所有通道静音，所有这些都需要手动取消静音。这可以使用 amixer 来完成 amixer set Master unmute 亮度 1 2 # 使用light 或者 xbacklight xbacklight = 80 代理 shell-clash(推荐) 1 2 3 4 5 # 安装,作者推荐用管理员安装,设置切管理员账号 # 查看服务 systemctl status clash # 安装路径 cd /usr/share/clash 全部超时，但log不报错 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # 其他设备可以，但就一台电脑全部超时，可能是时间不对 # 查看时间 date # 查看时区 date +“%Z %z” # 输出UTC +0800 才是东八区 # 设置时区 # 在 /etc/profile末尾添加 export TZ=\u0026#39;Asia/Shanghai\u0026#39; # 然后执行 source /etc/profile # 再次查看时区 #　通过ntp同步网络时间 sudo ntpdate cn.pool.ntp.org # 设置开机同步 sudo systemctl enable ntpd.service 软件推荐 开发类 vscode vim obsidian: markdown文本编辑器 xfce4 terminal zsh + zprezto+syntax-highlighting+autosuggestions+powerlevel10k 效率类 fzf 模糊搜索 catfusg 全局文件搜索 rofi 启动器 flameshot 截图 copyq 剪切板管理 ranger 终端里的文件管理器 tmux 分屏终端 meld 文件对比 xdm/Motrix 下载器 peek录制动态图片 stacer 清理软件/服务启动项管理/host编辑 peazip 解压软件 banzip wechat-uos ristretto/gpicview 图片查看 golddict/biyi 翻译 fcitx5+rime 输入法 yesplaymusic 网易云第三方 go-musicfox 终端网易云音乐 wps: 参考wiki, 装国外版, 装中文字体 vlc kdenlive/openshot 剪视频 kazam 简单录屏 htop top的快捷键版 xfce4-power-manager 电源管理 ARandR 分辨率设置 picom 透明度渲染合成 nitrogen 壁纸 timeshift 系统备份 neofetch 显示系统信息 balenaEtcher 烧录写盘 journalctl 实时查看日志 gparted 分区工具 stacer 垃圾清理 chezmoi 管理dotfiles ranger设置 复制默认配置文件\n1 ranger --copy-config=all 设置主题\n1 2 3 4 5 vim ~/.config/ranger/rc.conf #### # rc.conf 只需要包含与默认配置文件不同的部分 set colorscheme jungle #### 配置文件\nrc.conf - 选项设置和快捷键 commands.py - 能通过 : 执行的命令 rifle.conf - 指定不同类型的文件的默认打开程序。 scope.sh - 文件预览相关配置 快捷键: map\n添加DD快捷键为删除到回收站\n1 2 3 4 vim ~/.config/ranger/rc.cf #### map DD shell mv %s ~/.Trash #### q ： 退出 ranger\nR : 重新刷新目录\nS : 执行 shell 命令\n: 或者 ; : 控制台\nW : 显示日志\nk : 向上\nj : 向下\nh : 向左\nl : 向右\ng : 到顶部\nG : 到底部\nJ : 半页向下\nK : 半页向上\ngh : 相当于 cd ~\nge : 相当于 cd /etc\ngu : cd /usr\ndd : 剪切\nyy : 复制\npp : 粘贴\n让shell的目录跟随ranger, 使用 . ranger 代替ranger\n退出时保持目录shfit + s\n翻译软件 https://www.cnblogs.com/keatonlao/p/12702571.html\ngoldendict + translator\n1 vim ~/.config/translator/config.ini 1 2 3 4 5 6 #goldendict 添加词典-程序 python3 /home/hxx/文档/脚本/translator/translator.py --engine=baidu \u0026#34;%GDWORD%\u0026#34; python3 /home/hxx/文档/脚本/translator/translator.py --engine=bing \u0026#34;%GDWORD%\u0026#34; python3 /home/hxx/文档/脚本/translator/translator.py --engine=google \u0026#34;%GDWORD%\u0026#34; 谷歌浏览器多用户 1 2 3 4 5 6 # 在浏览器中打开 chrome://version/ 查看当前用户配置目录 # 用启动参数启动 google-chrome-stable --profile-directory=Default google-chrome-stable --profile-directory=\u0026#34;Profile 7\u0026#34; # 设置代理 google-chrom-stable --proxy-server=socks5://127.0.0.1:7890 修改desktop文件\n1 2 3 cd /usr/share/applications ls -al | grep chrome # 修改Name和Exec参数, %U参数表示可以传递多个url给浏览器,例如在文件管理器中选择多个html用chrome打开 ","date":"2023-01-20T11:36:40+08:00","permalink":"/p/endeavouros_bspwm_install/","title":"Arch桌面安装(endeavouros)"},{"content":"mac安装Navidrome https://www.navidrome.org/docs/installation/macos/\n下载 https://github.com/navidrome/navidrome\n配置文件 文档: https://www.navidrome.org/docs/usage/configuration-options/\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # https://www.navidrome.org/docs/usage/configuration-options/ MusicFolder = \u0026#34;/Volumes/Data/Music\u0026#34; DataFolder = \u0026#34;/Volumes/Data/Music/navidrome/data\u0026#34; ScanSchedule = \u0026#34;@every 10m\u0026#34; TranscodingCacheSize = \u0026#34;150MiB\u0026#34; # 转码存档的大小 EnableTranscodingConfig = true # 在UI中启动转码配置 EnableExternalServices = false # 外部集成 EnableStarRating = false # 启用星级 EnableFavourites = false # 启动收藏夹 DefaultLanguage = \u0026#34;zh\u0026#34; # Port = 4533 # CoverArtPriority = \u0026#34;embedded, cover.*, folder.*, front.*\u0026#34; DefaultTheme = \u0026#34;Spotify-ish\u0026#34; AutoImportPlaylists = \u0026#34;true\u0026#34; # 启用/禁用.m3u/nsp播放列表自动导入 PlaylistsPath = \u0026#34;navidrome/playlists\u0026#34; # LogLevel = \u0026#34;error\u0026#34; # info 注意事项:\nDataFolder用launchctl启动程序时不能用相对路径, 如果是用命令行启动, 可以用./data PlaylistsPath是相对MusicFolder的 配置开机后台启动 添加plist文件\n1 2 cd ~/Library/LaunchAgents/ vim navidrome.plist plist 文件内容:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE plist PUBLIC \u0026#34;-//Apple//DTD PLIST 1.0//EN\u0026#34; \u0026#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd\u0026#34;\u0026gt; \u0026lt;plist version=\u0026#34;1.0\u0026#34;\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;Label\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;navidrome\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;ProgramArguments\u0026lt;/key\u0026gt; \u0026lt;array\u0026gt; \u0026lt;string\u0026gt;/Volumes/Data/Music/navidrome/navidrome\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;-c\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;/Volumes/Data/Music/navidrome/navidrome.toml\u0026lt;/string\u0026gt; \u0026lt;/array\u0026gt; \u0026lt;key\u0026gt;RunAtLoad\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;key\u0026gt;StandardOutPath\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;/Volumes/Data/Music/navidrome/navidrome.log\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;StandardErrorPath\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;/Volumes/Data/Music/navidrome/navidrome.log\u0026lt;/string\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/plist\u0026gt; 注意事项:别添加到/opt/目录, 后面想删除删除不掉\n添加服务\n1 2 3 launchctl load navidrome.plist # 删除 launchctl unload navidrome.plist 启动服务 1 2 3 launchctl start navidrome # 停止 launchctl stop navidrome web页面 http://127.0.0.1:4533\n注意事项: 记住账号和密码, 把data删了就把数据清空\n(可选)添加智能播放列表 文档: https://github.com/navidrome/navidrome/issues/1417\n在PlaylistsPath配置的目录下添加文件, 文件名即播放列表的名称, 建议编辑完成再移动进去\n参考:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 # 最近播放.nsp vim 最近播放.nsp #====== { \u0026#34;all\u0026#34;: [ { \u0026#34;inTheLast\u0026#34;: { \u0026#34;lastPlayed\u0026#34;: 30 } } ], \u0026#34;sort\u0026#34;: \u0026#34;lastPlayed\u0026#34;, \u0026#34;order\u0026#34;: \u0026#34;desc\u0026#34;, \u0026#34;limit\u0026#34;: 100 } #====== vim 随机.nsp #====== { \u0026#34;all\u0026#34;: [ { \u0026#34;gt\u0026#34;: { \u0026#34;playCount\u0026#34;: -1 } } ], \u0026#34;sort\u0026#34;: \u0026#34;random\u0026#34; } #====== vim 中文.nsp #====== { \u0026#34;all\u0026#34;: [ { \u0026#34;contains\u0026#34;: { \u0026#34;filepath\u0026#34;: \u0026#34;中文\u0026#34; } } ], \u0026#34;sort\u0026#34;: \u0026#34;title\u0026#34;, \u0026#34;order\u0026#34;: \u0026#34;desc\u0026#34; } #====== 进入web页面, 点右上角运行情况--\u0026gt;完全扫描就能刷新出播放列表了\n可选参数:\nCurrent list of fields available (case-insensitive): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 title album artist albumartist hascoverart tracknumber discnumber year size compilation dateadded datemodified discsubtitle comment lyrics sorttitle sortalbum sortartist sortalbumartist albumtype albumcomment catalognumber filepath filetype duration bitrate bpm channels genre loved dateloved lastplayed playcount rating Operators available (case-insensitive): 1 2 3 4 5 6 7 8 9 10 11 12 13 is isNot gt lt contains notContains startsWith endsWith inTheRange before after inTheLast notInTheLast 客户端推荐 只推荐试用过的:\nsonixd(Windows/Linux/macOS) substreamer(android/ios|free|gitlab) symfonium(android|试用|palystore)\n更多 缺陷 navidrome使用subsonicapi, 无法提供文件夹播放列表 对音乐文件只有只读功能, 无法编辑删除 智能列表功能未完善, 并不能动态监听 优势 自带的web播放器功能不错 只要手机和pc在同个局域网下, 就能共享资源(可通过n2n组网) ","date":"2023-01-09T17:37:57+08:00","permalink":"/p/mac-install_navidrome/","title":"mac安装Navidrome"},{"content":"sublime4集成终端zsh https://stackoverflow.com/questions/31439023/sublime-text-3-has-integrated-terminal\nTerminus https://github.com/randy3k/Terminus#user-key-bindings\n安装插件Terminus\n配置字体:\n2.1. Preferences--\u0026gt;setting\n1 2 3 4 { \u0026#34;font_face\u0026#34;: \u0026#34;Sarasa Mono SC Nerd\u0026#34;, \u0026#34;panel_background_color\u0026#34;: \u0026#34;$background_color\u0026#34;, } 2.2 Preferences--\u0026gt;setting--\u0026gt;Package Setgings--\u0026gt;Terminus-Settings\n1 2 3 4 5 {\t\u0026#34;view_settings\u0026#34;: { \u0026#34;font_face\u0026#34;: \u0026#34;Sarasa Mono SC Nerd\u0026#34;, }, } 配置快捷键:\nPreferences--\u0026gt;setting--\u0026gt;Package Setgings--\u0026gt;Terminus-Settings\n1 2 3 4 5 6 7 8 [ { \u0026#34;keys\u0026#34;: [\u0026#34;ctrl+`\u0026#34;], \u0026#34;command\u0026#34;: \u0026#34;toggle_terminus_panel\u0026#34;, \u0026#34;args\u0026#34;: { \u0026#34;cmd\u0026#34;: \u0026#34;/bin/zsh\u0026#34;, \u0026#34;cwd\u0026#34;: \u0026#34;${file_path:${folder}}\u0026#34; } } ] 注意事项 Sublime Text \u0026gt;= 4114 and Terminus v0.3.20 解决内存占用问题.\n关闭可以用exit\n设置nerd字体解决符号异常\n","date":"2023-01-06T03:14:40+08:00","permalink":"/p/sublime4_integrated_terminal/","title":"sublime4集成终端zsh"},{"content":"homebrew 安装教程 https://brew.idayer.com\n或者直接看镜像源的教程 https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/\n1 /bin/bash -c \u0026#34;$(curl -fsSL https://cdn.jsdelivr.net/gh/ineo6/homebrew-install/install.sh)\u0026#34; 卸载 1 /bin/bash -c \u0026#34;$(curl -fsSL https://cdn.jsdelivr.net/gh/ineo6/homebrew-install/uninstall.sh)\u0026#34; 其他命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 brew update-reset # 重置更新 brew list #列出已安装的包 brew list --formulae # 所有已安装的 Formulae brew list --cask # 所有已安装的 Casks brew deps --installed --tree # 查看已安装软件的依赖 brew info # 显示安装了包数量，文件数量，和总占用空间 brew info \u0026lt;package\u0026gt; # 显示某个包的信息 brew outdated # 查看哪些安装包需要更新 brew upgrade # 更新所有已落后的包 brew upgrade \u0026lt;package\u0026gt; # 单独更新某个包 brew cleanup # 清理所有包的旧版本 brew cleanup \u0026lt;package\u0026gt; # 清理指定的旧版本包 brew cleanup -n # 查看可清理的旧版本包 brew uninstall --force \u0026lt;package\u0026gt; # 强制卸载某个软件 brew reinstall \u0026lt;package\u0026gt; # 重装 brew pin \u0026lt;package\u0026gt; # 锁定指定包 brew unpin \u0026lt;package\u0026gt; # 取消锁定指定包 brew doctor # 诊断brew brew autoremove # 删除所有未使用的依赖项 updating卡住 方法1: 按住ctrl + c取消本次更新\n方法2: 替换镜像源\n建议直接看镜像源教程 https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/\n\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;以下内容可以跳过: \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;\n平时我们执行 brew 命令安装软件的时候，跟以下 4 个仓库地址有关：\n1 2 3 4 1. brew.git\t源代码仓库 2. homebrew-core.git\t核心源 3. homebrew-bottles 预编译二进制软件包 4. Homebrew Cask 提供 macOS 应用和大型二进制文件的安装(带gui之类的) 通过以下操作将这 4 个仓库地址全部替换为 清华 提供的地址\n替换 / 还原 brew.git 仓库地址 1 2 3 4 5 # 清华 git -C \u0026#34;$(brew --repo)\u0026#34; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git # 还原为官方 git -C \u0026#34;$(brew --repo)\u0026#34; remote set-url origin https://github.com/Homebrew/brew.git 替换 / 还原 homebrew-core.git 仓库地址 1 2 3 4 5 # 清华 git -C \u0026#34;$(brew --repo homebrew/core)\u0026#34; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git # 还原为官方 git -C \u0026#34;$(brew --repo homebrew/core)\u0026#34; remote set-url origin https://github.com/Homebrew/homebrew-core.git 替换 / 还原 homebrew-bottles 访问地址\n这个步骤跟你的 macOS 系统使用的 shell 版本有关系\n所以，先来查看当前使用的 shell 版本echo $SHELL\n1 2 # 如果你的输出结果是 /bin/zsh，参考下方的 zsh 终端操作方式 # 如果你的输出结果是 /bin/bash，参考下方的 bash 终端操作方式 3.1 zsh 终端操作方式\n1 2 3 4 5 6 7 8 # 清华 echo \u0026#39;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles\u0026#39; \u0026gt;\u0026gt; ~/.zshrc source ~/.zshrc # 还原为官方提供的 homebrew-bottles 访问地址 vi ~/.zshrc # 然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置 source ~/.zshrc 3.2 bash 终端操作方式\n1 2 3 4 5 6 7 8 # 清华 echo \u0026#39;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles\u0026#39; \u0026gt;\u0026gt; ~/.bash_profile source ~/.bash_profile # 还原为官方提供的 homebrew-bottles 访问地址 vi ~/.bash_profile # 然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置 source ~/.bash_profile 替换/还原 homebrew/cask 地址 1 2 3 4 5 # 替换 homebrew/cask git -C \u0026#34;$(brew --repo homebrew/cask)\u0026#34; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask.git # 还原 git -C \u0026#34;$(brew --repo homebrew/cask)\u0026#34; remote set-url origin https://github.com/Homebrew/homebrew-cask.git 最后记得brew update \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;跳过结束 \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;\n依赖项不会自动删除 https://stackoverflow.com/questions/7323261/uninstall-remove-a-homebrew-package-including-all-its-dependencies\n1 brew autoremove 1 2 brew tap beeftornado/rmtree brew rmtree \u0026lt;package\u0026gt; ","date":"2022-12-27T18:35:37+08:00","permalink":"/p/homebrew/","title":"Homebrew"},{"content":"Submodule 子模块 https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97#_git_submodules\n新增 添加子模块 1 2 3 git submodule add \u0026lt;子模块地址\u0026gt; [指定路径(可选)] # 此时 .gitmodules .git/config .git/modules 会添加子模块的信息 # 子模块目录也会下载,不为空 查看 1 2 3 git status # 发现只列出 submodule 目录而不是里面所有的文件 # 对于模块外的项目来说，把子模块整个文件夹当成一个文件 提交 1 2 git add . git commmit -m \u0026#39;git add submodule\u0026#39; 克隆 如果是克隆已经添加了子模块的项目\n1 2 3 4 5 6 7 8 9 10 # 拉完主项目，此时子模块的目录是空的 git submodule init # 初始化本地配置文件 git submodule update # 拉取对应的提交 # 或者 git submodule update --init --recursive # 或者在拉取的时候添加参数 git clone \u0026lt;地址\u0026gt; --recurse-submodules # 子模块不一定是最新的，版本是在主项目里记录的版本 更新 情况1: 远程仓库的子模块更新了, 本地主项目记录的还是旧的子模块版本\n1 2 3 4 5 6 7 8 # 子模块是一个独立的git项目，它并不需要知道自己被谁用 cd \u0026lt;子模块目录\u0026gt; git pull # 和第一次添加一样, 并不会在status里显示模块里面的文件更新 # submodule的版本控制在于submodule git 的 commit id, 所以要提交这些更新记录 cd ../../ git add static/platform git commit -m \u0026#39;submodule update\u0026#39; 当项目的子模块很多的时候，可以一个命令更新所有的模块\n1 git submodule foreach \u0026#39;git pull origin master\u0026#39; 情况2: 远程仓库主项目的子模块信息更新了, 本地的子模块还是旧的\n1 2 3 4 5 # 先更新主项目 git pull origin master # 再根据主项目里的记录更新本地子模块 git submodule init git submodule update 情况3: 对本地的子模块作了个人的修改: 不能提交到子模块的仓库, 就完全没用 修改模块 如果有子模块的修改权，那么把子模块当成单独的项目修改提交\n删除模块 1 2 3 4 5 6 7 8 # 不要去手动修改 .gitmodules .git/config .git/modules cached # 先卸载 git submodule deinit \u0026lt;子模块目录\u0026gt; # 添加 --force 参数，则子模块内有本地修改，也会被移除 git submodule deinit --force static/platform # 删除文件夹 git rm \u0026lt;子模块目录\u0026gt; git commit -m \u0026#34;delete submodule\u0026#34; 拆分已有文件为子模块 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # 建立新分支 # 建立单独的仓库 cd \u0026lt;sub-module\u0026gt; git init git add . git commit -m \u0026#34;version 1.0 of sub-module\u0026#34; git remote add origin \u0026lt;sub-module-originUrl\u0026gt; git push -u origin master # 把文件夹从暂存区和工作区删除 cd ../ git rm -r \u0026lt;sub-module\u0026gt; git commit -m \u0026#34;remove sub-module directory\u0026#34; rm -rf \u0026lt;sub-module\u0026gt; # 注册为子模块 git submodule add \u0026lt;sub-module-originUrl\u0026gt; \u0026lt;sub文件夹\u0026gt; git commit -m \u0026#34;add submodule version 1.0\u0026#34; 存在问题点：如果要回到拆分前没有子模块的分支，结果发现提示报错\n1 2 3 4 5 6 7 8 9 error: The following untracked working tree files would be overwritten by checkout: sub/a.txt Please move or remove them before you switch branches. # 可以强制切换, 注意强制切换前保存修改 git checkout -f master # 再回到test分支，发现子模块文件夹空了 cd \u0026lt;sub-module\u0026gt; # 找回 git checkout . ","date":"2022-12-25T23:47:16+08:00","permalink":"/p/permalinks/","title":"Git Submodules"},{"content":"清理System Data 几乎照搬原文： https://zhuanlan.zhihu.com/p/349862578\n效果  --\u0026gt; About this Mac --\u0026gt; Storage --\u0026gt; System Data\n下图是清理后的，大概清理掉8G左右的残留文件\n存储空间中文件的类别与分析 ​\t​ 其他/”系统数据”：硬盘中包含不属于上述所列类别的文件都在“其他”中。此类别主要包括：\n系统运行时所使用的文件和数据，例如日志文件、缓存、VM 文件和其他运行时系统资源，临时文件和字体等。 第三方App 的支持文件（日志、缓存、配置文件、临时文件和数据库等资源）和插件。 日志 是用来记录 App 运行时的状态信息，常用于排查程序bug。 缓存 是为了提高 App 运行速度，常用于存储经常访问的数据图片等，例如浏览器访问网页时会将常访问网页的页面内容和图片放在缓存中。 配置文件 用来存储App 的一些偏好设置信息， 临时文件和数据库 是程序运行时生成或下载的数据，例如Adobe Photoshop中项目的索引、导入的各种素材包和滤镜；微信的登录信息、聊天记录和附件等等。 Finder 文件体系 带眼睛图标的为默认隐藏文件\n显示Library的操作：\n在用户文件夹下 --\u0026gt; 左上角菜单View --\u0026gt;Show View Options --\u0026gt; Show Library Folder 打勾 主要关注以下几个文件夹：\nApplication Support：保存非App Store下载的App的临时文件和数据库。 Caches：保存非App Store下载的App的缓存文件。 Logs：保存非App Store下载的App的日志文件。 Preferences：保存非App Store下载的App的偏好设置文件。 Containers：保存从App Store下载的App的日志、缓存、偏好设置、临时文件和数据库。 Group Containers：保存使用了Group App技术的App的临时文件和数据库，例如MS Office全家桶。 使用工具分析和清理 使用的软件为： Cleaner One Pro 免费版\n缓存清理\nJunk Files --\u0026gt; Scan --\u0026gt; Application Caches\n文件夹分析： 人工找到大文件， 且确定是不需要的，再删除\nDisk Map --\u0026gt; 选择 Library --\u0026gt; 人工分析\n特别注意：\n为了避免删错，删前先搜索下文件夹对应的程序或内容，删除后先保留在回收站一段时间，删错了还能还原。\n","date":"2022-12-23T21:11:11+08:00","permalink":"/p/clean-macos-system-data/","title":"MacOs清理System Data"},{"content":"安装 https://github.com/NginxProxyManager/nginx-proxy-manager\n按照readme安装即可\n已知bug 版本 v2.9.19\n申请泛域名证书失败 验证证书失败 复现： Test Server Reachability 1 Communication with the API failed, is NPM running correctly? 申请证书方法 单独申请\n在Proxy Hosts -- Edit Proxy Host -- SSL -- 关闭Force SSL -- Request a new SSL Certificate\n部署静态网站方法 把静态文件夹放到 data/access里 在管理系统上， Proxy Hosts -- Edit Proxy Host -- Advanced里添加类似以下的配置 1 2 3 4 location / { root /data/access/myIndex; try_files $uri $uri/index.html /index.html; } Detail的Domain Names按实际的写， Scheme IP Port随便填 不暴露其他端口 例如: 只希望暴露常见的80/443端口,把子域转发到宿主机的对应端口\nnpm是部署在容器里的,其他服务也是部署在容器里的,和宿主机并不在同一个网络,所以不能直接用127.0.0.1或者localhost\n通过ip addr show docker0就可以得到宿主机的地址,转发到该地址就不用暴露其他端口到公网\n","date":"2022-12-22T00:15:53+08:00","permalink":"/p/npm/","title":"Nginx Proxy Manager"},{"content":" 问题描述： 升级hugo主题stack到最新版本后，侧边栏的home菜单在开发模式下不会高亮\n解决方法： 把exampleSite/content里的_index.md复制一份到自己的content文件夹\n原因：破坏性更新\n1 2 3 4 5 6 7 8 9 10 cd themes/hugo-theme-stack/exampleSite/content git log --follow _index.md ==== commit 15d2040f7e4aaf9db8e4459137d146bb42b39bb6 Author: Jimmy Cai \u0026lt;github@jimmycai.com\u0026gt; Date: Fri Mar 4 08:46:27 2022 +0000 chore(exampleSite): fix home menu item highlight ==== ","date":"2022-12-21T23:59:52+08:00","permalink":"/p/hugo-theme-bug/","title":"hugo主题stack侧边栏bug"},{"content":"n2n 参考:\nhttps://bugxia.com/2396.html\nhttps://www.jianshu.com/p/559c1e582724\nhttps://github.com/LomotHo/n2n-releases\n服务器安装 centos 1 2 3 4 # RPM安装 yum install libzstd -y wget https://github.com/ntop/n2n/releases/download/3.0/n2n-3.0.0-1038.x86_64.rpm rpm -i n2n-3.0.0-1038.x86_64.rpm 启动服务器 1 2 3 启动服务端 #实际使用时，可以去掉 -f 参数，使其后台运行 supernode -p 端口 -f 服务端（Supernode）附加参数 1 2 3 4 5 6 7 8 9 10 -p 端口 | Supernode监听端口，默认 7654 -F federation名称 | supernode federation名称，默认为 *Federation -l 主机:端口 | 和 -F 配合，已知的一台Supernode地址和端口 -M | 关闭非用户名密码认证的群组的MAC和IP地址欺骗保护功能 -V 文本 | 自定义字符串（最长19位），用于在管理输出日志中展示 -c 组名称配置文件路径 | 该配置文件中包含允许使用的组名称 -a IP段 | 用于自动分配IP，格式如 -a 192.168.0.0-192.168.255.0/24 -t 端口 | 用于管理supernode --management_password 文本 | 管理端的密码 -v | 输出更多日志 设置开机启动\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 修改配置文件 sudo vim /etc/n2n/supernode.conf ==== -p=端口 # 服务端没有密码，为了避免被白嫖，添加组名称配置文件，一行一个 -c=/home/n2n/community.list ==== sudo systemctl enable supernode sudo systemctl start supernode sudo systemctl status supernode journalctl -f -u supernode # journalctl 查看日志 # -f 实时最新 # -u 指定服务 服务器端口放行 腾讯云的防火墙 若服务器开启了如iptables\\firewalld\\ufw等防火墙，需要放行supernode所设置的端口，否则客户端无法连接 1 2 3 4 5 6 7 8 9 #firewalld firewall-cmd --zone=public --add-port=9527/udp --permanent firewall-cmd --reload #iptables iptables -I INPUT -p udp --dport 9527 -j ACCEPT service iptables save service iptables restart #ufw ufw allow 9527/udp centos7 默认是firewall\n1 2 3 4 5 6 7 8 # 查看状态 systemctl status firewalld # 或者 firewall-cmd --state #　查看所有开放端口 firewall-cmd --zone=public --list-ports # 禁用端口 firewall-cmd --zone=public --remove-port=5672/tcp --permanent #关闭5672端口 客户端组建N2N虚拟局域网 1 sudo edge -a 局域网ip -c n2n组名 -l [公网ip]:公网端口 -f 参数说明\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 -a \u0026lt;mode:address\u0026gt; | n2n网卡的ip地址，即本机的n2n的ip。直接填写IP或者使用 DHCP \u0026#39;-r -a dhcp:0.0.0.0\u0026#39; -c \u0026lt;community\u0026gt; | n2n组，只有相同组的edge之间才能进行通讯 -k \u0026lt;encrypt key\u0026gt; | edge的加密密码 -s \u0026lt;netmask\u0026gt; | 子网掩码 可选 (255.255.255.0). -l \u0026lt;supernode host:port\u0026gt; | supernode的ip和端口 -i \u0026lt;reg_interval\u0026gt; | 注册时间间隔，用于NAT打洞(默认为20秒) -L \u0026lt;reg_ttl\u0026gt; | 当通过超级节点UDP NAT打洞时，注册数据包的TTL(默认0不设置) -p \u0026lt;local port\u0026gt; | 固定本地UDP端口 -u \u0026lt;UID\u0026gt; | 如果不想用root来运行edge，则可指定本机账号的uid，windows下可忽略 -g \u0026lt;GID\u0026gt; | 如果不想用root来运行edge，则可指定本机账号的groupid，windows下可忽略 -f | 带-f时前台运行，不添加-f 参数时作为守护进程运行 -m \u0026lt;MAC address\u0026gt; | n2n虚拟网卡的MAC地址，默认随机设置 | eg. -m 01:02:03:04:05:06 -M \u0026lt;mtu\u0026gt; | MTU 值，默认1290 -r | 启用数据转发功能，当需要访问该设备的局域网时需要设置 -A1 | 禁用载荷加密。不能与key 同时使用(默认为Twofish)。 -A2 ... -A5 or -A | 选择有效载荷加密的密码(和-k一起用)，需要一个密钥:-A2 = Twofish(默认)， | -A3 or -A (deprecated) = AES-CBC, -A5 = Speck-CTR. -H | Enable full header encryption. Requires supernode with fixed community. -z1 ... -z2 or -z | Enable compression for outgoing data packets: -z1 or -z = lzo1x (default=disabled). -E | 接受多播MAC地址(默认=drop) -S | 不要连接P2P ，总是使用超级节点转发数据 -n \u0026lt;cidr:gateway\u0026gt; | 通过gw路由IPv4网络。使用0.0.0.0/0作为默认gw。可多次设置。 -v | 详细日志 -t \u0026lt;port\u0026gt; | 管理UDP端口(用于机器上的多个edges)。 环境变量: N2N_KEY | 加密密钥(ASCII) 安装tuntap 1 2 brew tap happynclient/taps brew install tuntap --cask .查看系统信息，您会看到一个名为 tap0的虚拟网卡 sudo ifconfig\nmacos 设置开机启动项 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 # 在 /Library/LaunchDaemons 新增文件 lomotho.n2n-edge.plist，用于 launchd 控制的开机自启（类似 systemd） # RunAtLoad 开机时是否运行 # KeepAlive 是否需要一直运行 ==== \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE plist PUBLIC \u0026#34;-//Apple//DTD PLIST 1.0//EN\u0026#34; \u0026#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd\u0026#34;\u0026gt; \u0026lt;plist version=\u0026#34;1.0\u0026#34;\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;KeepAlive\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;key\u0026gt;RunAtLoad\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;key\u0026gt;Label\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;lomotho.n2n.edge\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;ProgramArguments\u0026lt;/key\u0026gt; \u0026lt;array\u0026gt; \u0026lt;string\u0026gt;/usr/local/bin/edge\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;/usr/local/etc/n2n/edge.conf\u0026lt;/string\u0026gt; \u0026lt;/array\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/plist\u0026gt; ==== 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 # 客户端配置文件 # /usr/local/etc/n2n/edge.conf # # The configuration file is similar to the command line, with one option per line. An equal # sign \u0026#39;=\u0026#39; should be used between key and value. Example: -c=mynetwork or --community=mynetwork # This file contains a basic configuration example, please refer to the help (-h) for the full # list of available options. # # -d|--tun-device # Specifies the name of the TUN interface. # #\t-d=n2n0 # # -c|--community # Specifies the n2n community name the edge belongs to. # -c=xxx # # -k # Sets the encryption key (ASCII). The environment variable N2N_KEY=\u0026lt;key\u0026gt; can also be used. # #\t-k=mypassword # # -m # Specified the MAC address for the TAP interface (random otherwise). # # -m=DE:AD:BE:EF:99:99 # # -a # Sets the interface address. For DHCP use \u0026#39;-r -a dhcp:0.0.0.0\u0026#39;. # -a=x.x.x.x # # -p # Sets the local UDP port to a fixed port. # # -p=50001 # # -l|--supernode-list # Specifies the supernode IP and port. # -l=x.x.x.x:x # 访问局域网其他设置 -r # -Z1为LZO(1x)压缩 -Z2为ZSTD压缩，默认没有 -Z2 # 1 2 3 4 5 # 开启服务 launchctl load /Library/LaunchDaemons/lomotho.n2n.edge.plist # 关闭服务 launchctl unload /Library/LaunchDaemons/lomotho.n2n.edge.plist linux客户端设置自启动 1 2 3 4 5 6 7 8 9 10 11 12 13 14 sudo vim /etc/n2n/edge.conf ====== -c=组织名 -a=内网地址 -l=节点公网地址:端口 ====== # 设置自启服务 sudo systemctl enable edge sudo systemctl start edge sudo systemctl status edge journalctl -f -u edge # journalctl 查看日志 # -f 实时最新 # -u 指定服务 ","date":"2022-12-18T17:02:27+08:00","permalink":"/p/n2n-deploy/","title":"n2n部署"},{"content":"Git Git 常用命令 仓库 1 2 3 4 5 6 7 8 9 10 # 在当前目录新建一个Git代码库 $ git init # 新建一个目录，将其初始化为Git代码库 $ git init [project-name] # 下载一个项目和它的整个代码历史 $ git clone [url] # 下载指定分支 $ git clone -b [branchName] [url] 配置 1 2 3 4 5 6 7 8 9 # 显示当前的Git配置 $ git config --list # 编辑Git配置文件 $ git config -e [--global] # 设置提交代码时的用户信息 $ git config [--global] user.name \u0026#34;[name]\u0026#34; $ git config [--global] user.email \u0026#34;[email address]\u0026#34; 增加/删除文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # 添加指定文件到暂存区 $ git add [file1] [file2] ... # 添加指定目录到暂存区，包括子目录 $ git add [dir] # 添加当前目录的所有文件到暂存区 $ git add . # 添加每个变化前，都会要求确认 # 对于同一个文件的多处变化，可以实现分次提交 $ git add -p # 删除工作区文件，并且将这次删除放入暂存区 $ git rm [file1] [file2] ... # 停止追踪指定文件，但该文件会保留在工作区 $ git rm --cached [file] # 改名文件，并且将这个改名放入暂存区 $ git mv [file-original] [file-renamed] 代码提交 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # 提交暂存区到仓库区 $ git commit -m [message] # 提交暂存区的指定文件到仓库区 $ git commit [file1] [file2] ... -m [message] # 提交工作区自上次commit之后的变化，直接到仓库区 $ git commit -a # 提交时显示所有diff信息 $ git commit -v # 使用一次新的commit，替代上一次提交 # 如果代码没有任何新变化，则用来改写上一次commit的提交信息 $ git commit --amend # 或者 $ git commit --amend -m [message] # 重做上一次commit，并包括指定文件的新变化 $ git commit --amend [file1] [file2] ... 分支 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 # 列出所有本地分支 $ git branch # 列出所有远程分支 $ git branch -r # 列出所有本地分支和远程分支 $ git branch -a # 新建一个分支，但依然停留在当前分支 $ git branch [branch-name] # 新建一个分支，并切换到该分支 $ git checkout -b [branch] $ git checkout -b dev origin/dev # 新建分支dev并切换到该分支, 链接到远程dev分支 #　让分支指向另一个提交 git branch main HEAD~3 # 让main分支指向head的前第3个提交 # 或者 git branch -f main HEAD~3 # -f表示强制 # 新建一个分支，指向指定commit $ git branch [branch] [commit] # 新建一个分支，与指定的远程分支建立追踪关系 $ git branch --track [branch] [remote-branch] # 切换到指定分支，并更新工作区 $ git checkout [branch-name] # 切换到上一个分支 $ git checkout - # 建立追踪关系，在现有分支与指定的远程分支之间 $ git branch --set-upstream [branch] [remote-branch] # 或者 $ git branch -u origin/master local-branch # 简写 # 这样 local-branch 就会跟踪 origin/master 了。如果当前就在 local-branch 分支上, 还可以省略 local-branch $ git branch -u origin/master # 合并指定分支到当前分支 $ git merge [branch] # (不推荐) $ git merge --no-ff 要合并的分支 (推荐, 不使用快速合并, 提交历史更加清晰, 不容易出错) # git 分支合并到主分支时，去掉分支的冗余提交。即，将分支的多次提交一次性合并到主分支上。 $ git checkout master # 切换到主分支 $ git merge --squash dev # 一次性合并分支的多次提交 $ git commit -m \u0026#39;xxx版\u0026#39; # 将刚‘合并的提交’提交到主分支master # 选择一个commit，拷贝分支合并进当前分支, 比如把dev的c2和c4拷贝为c2\u0026#39;, c4\u0026#39;, 加到到main分支后面 $ git cherry-pick [commit] # 删除分支 $ git branch -d [branch-name] # 删除远程分支 $ git push origin --delete [branch-name] $ git branch -dr [remote/branch] # 查看本地分支和哪个远程分支对应 git branch -vv 标签 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 # 列出所有tag $ git tag # 新建一个tag在当前commit $ git tag [tag] # 详细编辑提交内容 $ git tag [tag] -a # 新建一个tag在指定commit $ git tag [tag] [commit] # 删除本地tag $ git tag -d [tag] # 删除远程tag $ git push origin :refs/tags/[tagName] # 或者 $ git push origin --delete [tagName] # 查看tag信息 $ git show [tag] # 提交指定tag $ git push [remote] [tag] # 提交所有tag $ git push [remote] --tags # 新建一个分支，指向某个tag $ git checkout -b [branch] [tag] # 拉取分支上现有的tags $ git fetch --tags 查看信息 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 # 显示有变更的文件 $ git status # 显示当前分支的版本历史 $ git log # 只显示提交 $ git log --oneline # 提交树 $ git log --oneline --graph # 显示commit历史，以及每次commit发生变更的文件 $ git log --stat # 搜索提交历史，根据关键词 $ git log -S [keyword] # 显示某个commit之后的所有变动，每个commit占据一行 $ git log [tag] HEAD --pretty=format:%s # 显示某个commit之后的所有变动，其\u0026#34;提交说明\u0026#34;必须符合搜索条件 $ git log [tag] HEAD --grep feature # 显示某个文件的版本历史，包括文件改名 $ git log --follow [file] $ git whatchanged [file] # 显示指定文件相关的每一次diff $ git log -p [file] # 显示过去5次提交 $ git log -5 --pretty --oneline # 显示所有提交过的用户，按提交次数排序 $ git shortlog -sn # 显示指定文件是什么人在什么时间修改过 $ git blame [file] # 显示暂存区和工作区的差异 $ git diff # 显示暂存区和上一个commit的差异 $ git diff --cached [file] # 显示工作区与当前分支最新commit之间的差异 $ git diff HEAD # 显示两次提交之间的差异 $ git diff [first-branch]...[second-branch] # 本地与远程的差集 :（显示远程有而本地没有的commit信息 git log local_branch..origin/remote_branch # 统计文件的改动 git diff --stat dev origin/master # 显示今天你写了多少行代码 $ git diff --shortstat \u0026#34;@{0 day ago}\u0026#34; # 显示某次提交的元数据和内容变化 $ git show [commit] # 显示某次提交发生变化的文件 $ git show --name-only [commit] # 显示某次提交时，某个文件的内容 $ git show [commit]:[filename] # 显示当前分支的最近几次提交和回退 $ git reflog # 就算是被硬重置了也能看到已丢失的记录 远程同步 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 # 下载远程仓库的所有变动 $ git fetch [remote] # 所有远程仓库 $ git fetch -a # 显示所有远程仓库 $ git remote -v # 显示某个远程仓库的信息 $ git remote show [remote] # 增加一个新的远程仓库，并命名 $ git remote add [shortname] [url] # 取回远程仓库的变化，并与本地分支合并 $ git pull [remote] [branch] # 上传本地指定分支到远程仓库 $ git push [remote] [branch] # 强行推送当前分支到远程仓库，即使有冲突 $ git push [remote] --force $ git push [remote] -f # 推送所有分支到远程仓库 $ git push [remote] --all 撤销 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 # 恢复暂存区的指定文件到工作区 $ git checkout [file] # 恢复某个commit的指定文件到暂存区和工作区 $ git checkout [commit] [file] # 恢复暂存区的所有文件到工作区 $ git checkout . # 将在工作空间但是不在暂存区的文件撤销更改 git restore \u0026lt;file\u0026gt; # 将暂存区的文件从暂存区撤出，但不会更改文件 git restore --staged \u0026lt;file\u0026gt; # 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变 $ git reset [file] # 重置暂存区与工作区，与上一次commit保持一致 --hard危险操作 $ git reset --hard # 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变 $ git reset [commit] # 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致 $ git reset --hard [commit] # 未push时, 撤销上次commit $ git reset --soft HEAD^ --soft # 不删除工作空间的改动代码，撤销commit，撤销的commit会退到暂存区 --hard # 清空工作区和暂存区，撤销commit --mixed # 不删除工作空间的改动代码，撤销commit, 重置暂存区, 撤销的commit和暂存区会退到工作区 # 改注释 # 另外一点，如果commit注释写错了，先要改一下注释 $ git commit --amend # 这时候会进入vim编辑器，修改完成你要的注释后保存即可。 # 或者上次提交少了一点，改错了一点， 把少的add, 把错的改正， 再git commit --amend -m # 重置当前HEAD为指定commit，但保持暂存区和工作区不变 $ git reset --keep [commit] # 新建一个commit，用来撤销指定commit # 后者的所有变化都将被前者抵消，并且应用到当前分支 $ git revert [commit] # 例如：假设当前提交是c2, 上一次提交是c1, 执行 git revert HEAD，会新增一个提交c2\u0026#39;， 提交的状态和c1一样， 用处就是可以把这次变化推到远程分支上，其他开发者也能看到 # 而git reset是local的，退了就退了，其他人看不到， 还有想退到上次，要多加^, revert用 代码暂存 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 # 执行存储时，添加备注，方便查找，只有git stash 也要可以的，但查找时不方便识别 $ git stash save \u0026#34;save message\u0026#34; # 查看stash了哪些存储 $ git stash list # 显示做了哪些改动，默认show第一个存储,如果要显示其他存贮，后面加stash@{$num}，比如第二个 git stash show stash@{1} $ git stash show # 显示第一个存储的改动，如果想显示其他存存储，命令：git stash show stash@{$num} -p ，比如第二个：git stash show stash@{1} -p $ git stash show -p # 应用某个存储,但不会把存储从存储列表中删除, 默认使用第一个存储,即stash@{0} $ git stash apply # 命令恢复之前缓存的工作目录，将缓存堆栈中的对应stash删除, 默认为第一个stash,即stash@{0} $ git stash pop # 丢弃stash@{$num}存储，从列表中删除这个存储 $ git stash drop stash@{$num} # 删除所有缓存的stash $ git stash clear # 暂时将未提交的变化移除，稍后再移入 $ git stash $ git stash pop ","date":"2022-01-04T14:15:26+08:00","permalink":"/p/git-common-command/","title":"Git常用命令"},{"content":"markdown 笔记 锚点\n标题 1 2 3 4 5 # 一级标题\u0026lt;h1\u0026gt; ## 二级标题\u0026lt;h2\u0026gt; ### 三级标题\u0026lt;h3\u0026gt; #### 四级标题\u0026lt;h4\u0026gt; ##### 五级标题\u0026lt;h5\u0026gt; 强调 1 2 *斜体的文字* _斜体的文字_ 斜体的文字\n1 2 **粗体的文字** __粗体的文字__ 粗体的文字\n1 ***加粗斜体的文字*** 加粗斜体的文字\n1 ~~删除线的文字~~ 删除线的文字\n1 这些~~符号~~*可以***组合** 这些符号可以组合\n超链接 Markdown 支持两种形式的链接语法： 行内式和参考式两种形式，行内式一般使用较多。\n行内式 1 [链接文字](链接地址 \u0026#34;title可选\u0026#34;) 例:\n1 2 [GitHub](http://github.com) [GitHub](http://github.com \u0026#34;这就是个提示\u0026#34;) 例: GitHub GitHub\n（ps:段首加空格，shift+space切换到全角，直接加空格）\n参考式 参考式多用在学术论文上，或者在文章中多处使用相同链接。\n1 2 [链接文字][链接标记] [链接标记]:链接地址 \u0026#34;链接标题\u0026#34; `任意地方添加` 如果链接文字可以当链接标记:\n1 2 [链接文字][] [链接文字]: 链接文字 链接文字\n1 2 3 4 5 例:[Github][1]、[Google][2]、[知乎][]是我经常去的网站。 [1]: http://github.com [2]: http://www.google.com [知乎]: https://www.zhihu.com/ 例:Github、Google、知乎是我经常去的网站。\n自动短链接 1 2 \u0026lt;http://example.com/\u0026gt; \u0026lt;address@example.com\u0026gt; http://example.com/\naddress@example.com\n锚点 网页中，锚点其实就是页内超链接，也就是链接本文档内部的某些元素，实现当前页面中的跳转。\n1 2 3 \u0026lt;span id=\u0026#34;jump\u0026gt;锚点\u0026lt;/span\u0026gt; [文字](#jump) 例：跳转到开头 (ps: windows要按住ctrl, mac要按主cmd)\n列表 无序列表 1 2 3 4 5 6 7 8 9 10 11 * 无序列表一 * 无序列表二 * 无序列表三 - 无序列表一 - 无序列表二 - 无序列表三 + 无序列表一 + 无序列表二 + 无序列表三 无序列表一 无序列表二 无序列表三 无序列表一 无序列表二 无序列表三 无序列表一 无序列表二 无序列表三 有序列表 1. 有序列表一 2. 有序列表二 3. 有序列表三 (ps:注意符号后面有空格)\n有序列表项 一\n有序列表项 二\n有序列表项 三\n定义型列表 1 定义型列表由名词和解释组成。一行写上定义，紧跟一行写上解释。解释的写法冒号紧跟一个缩进(Tab) Markdown 轻量级文本标记语言，可以转换成html，pdf等格式 列表缩进 1 2 3 4 5 6 7 8 9 10 11 12 13 * 轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。 那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。 软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！ 那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。 * 寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。 但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！ 悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。 轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。\n那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。\n软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！\n那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。\n寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。\n但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！\n悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。\n包含引用的列表 1 2 3 4 * 阅读的方法 \u0026gt; 静下心 \u0026gt; 打开书本 阅读的方法\n静下心 打开书本\n引用 1 \u0026gt; 引用的内容 引用的内容\n引用的多层嵌套 1 2 3 \u0026gt; 第一层 \u0026gt; \u0026gt; 第二层 \u0026gt; \u0026gt; \u0026gt; 第三层 第一层\n第二层\n第三层\n引用块内的其他语法 引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等。\n1 let a = null 加粗\n插入图片 行内式 1 2 ![alt](url) ps: 为了让图片左对齐, 在前面加一个空格即可 参考式 1 2 3 ![alt][标记] [标记]: 图片地址 \u0026#34;Title\u0026#34; 目录 1 2 直接在文章头部加[TOP] ps:部分编辑器支持,部分不支持 脚注 1 2 3 添加脚注的地方[^1] [^1]: 脚注的内容 ps: 脚注和脚注之间应该空一行 添加脚注的地方1\n表格 1 2 3 4 5 |学号|姓名|分数| |-|-|-| |小明|男|75| |小红|女|79| |小陆|男|92| 学号 姓名 分数 小明 男 75 小红 女 79 小陆 男 92 省略写法 1 2 3 4 5 学号|姓名|分数 -|-|- 小明|男|75 小红|女|79 小陆|男|92 学号 姓名 分数 小明 男 75 小红 女 79 小陆 男 92 对齐 1 2 3 4 5 6 7 学号|姓名|分数 :-|:-:|-: 小明|男|75 小红|女|79 小陆|男|92 ps: 第一列左对齐, 第二列居中, 第三列右对齐 学号 姓名 分数 小明 男 75 小红 女 79 小陆 男 92 分隔线 1 2 3 *** --- ___ 代码 行内式 1 `代码` test\n代码块 1 2 3 ​```js let a = 1 ​``` 1 let a = 1 可展开的代码块 1 2 3 4 5 6 \u0026lt;details\u0026gt; \u0026lt;summary\u0026gt;CLICK ME\u0026lt;/summary\u0026gt; \u0026lt;pre\u0026gt;\u0026lt;code\u0026gt;let a = 0 return a \u0026lt;/code\u0026gt;\u0026lt;/pre\u0026gt; \u0026lt;/details\u0026gt; CLICK ME let a = 0 return a HTML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 在代码区块里面，\u0026amp;、\u0026lt;和\u0026gt;会自动转成HTML实体 HTML原始码，只需要复制贴上，剩下的Markdown都会帮你处理 \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;1\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;2\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;3\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;4\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;5\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;6\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; 1 2 3 4 5 6 脚注的内容\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2021-12-30T00:00:00Z","permalink":"/p/markdown-note/","title":"Markdown笔记"},{"content":"nextlify部署hugo blog 参考：\nhugo官方: https://gohugo.io/hosting-and-deployment/hosting-on-netlify\nnextlify官方: https://docs.netlify.com/integrations/frameworks/hugo/\n步骤 上传项目到github仓库, 该仓库可以是私人仓库\nhugo的主题必须是git submodule形式, 如果自定义主题, 上传到gihub仓库上, 以子模块方式引入\n在.gitignore里排除 public文件夹\n在项目根目录下新建文件netlify.toml\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 [build] publish = \u0026#34;public\u0026#34; command = \u0026#34;hugo --gc --minify\u0026#34; [context.production.environment] HUGO_VERSION = \u0026#34;0.65.3\u0026#34; HUGO_ENV = \u0026#34;production\u0026#34; HUGO_ENABLEGITINFO = \u0026#34;true\u0026#34; [context.split1] command = \u0026#34;hugo --gc --minify --enableGitInfo\u0026#34; [context.split1.environment] HUGO_VERSION = \u0026#34;0.65.3\u0026#34; HUGO_ENV = \u0026#34;production\u0026#34; [context.deploy-preview] command = \u0026#34;hugo --gc --minify --buildFuture -b $DEPLOY_PRIME_URL\u0026#34; [context.deploy-preview.environment] HUGO_VERSION = \u0026#34;0.65.3\u0026#34; [context.branch-deploy] command = \u0026#34;hugo --gc --minify -b $DEPLOY_PRIME_URL\u0026#34; [context.branch-deploy.environment] HUGO_VERSION = \u0026#34;0.65.3\u0026#34; [context.next.environment] HUGO_ENABLEGITINFO = \u0026#34;true\u0026#34; 注册Nextlify，可以用github账号授权\n选择 “New site from Git”——“Github”——选择自己hugo博客源码对应的仓库\n在Deploy之前可以先设置下, \u0026quot;site overview\u0026quot;--\u0026quot;site setting\u0026quot;--\u0026quot;change site name\u0026quot;, 不改的话会默认分配https://xxx-xxx-xxx.netlify.app一堆符号的二级域名\nDeploy status badge徽章可以放到项目的readme上, 可以看到最新部署状态\nDeploy\n每次仓库更新, netlify就会自动部署\n可选: 绑定域名 Site settings -- Domain management--Custom domains--Add domain alias--填写域名--verify--Yes,add domain 填写后到DNS 解析提供商里面，将 CNAME 记录值更改为 Netlify 给你的二级域名 https: 隔一段时间后点Verify DNS configuration 可能的问题 报错： 1 2 3 4 5 Production: master@HEAD Failed failed during stage \u0026#39;building site\u0026#39;: Build script returned non-zero exit code: 255 # 解决方法: stackoverflow上找到类似答案，需要修改Netlify控制台的环境变量与实际Hugo版本一致。 # 技术问题千万别用百度，垃圾csdn # hugo -v “setting”——“Build\u0026amp;deploy”——“Environment”——\u0026quot;Environment variables\u0026quot;——“Edit variables”，左边填“HUGO_VERSION”，右边填“v?.?.?”。\n注：版本号以实际为准\n报错\n1 2 The build image for this site uses Ubuntu 16.04 Xenial Xerus, which is no longer supported. # ubuntu 版本过低 \u0026quot;Deploys\u0026quot;--\u0026quot;Delploy settings\u0026quot;--\u0026quot;Build image selection\u0026quot;--\u0026quot;Edit settings\u0026quot;--选最新的\n重新部署\n","date":"2020-02-28T00:00:00Z","permalink":"/p/netlify-and-hugo/","title":"使用netlify部署hugo注意事项"},{"content":"​ 在切换Hexo到Hugo的过程中，由于有很多误操作造成提交记录很难看，需要清空历史提交记录。\n切换到新的分支。\n1 git checkout --orphan latest_branch 缓存所有的文件（除了.gitignore中声明排除的）\n1 git add -A 提交跟踪过的文件。\n1 git commit -m \u0026#34;提交记录\u0026#34; 删除master分支。\n1 git branch -D master 重命名当前分支为master。\n1 git branch -m master 提交到远程master分支。\n1 git push -f origin master ","date":"2020-02-27T00:00:00Z","permalink":"/p/delete-all-gitcommit/","title":"git删除所有历史提交记录"},{"content":"参考方法:https://blog.csdn.net/weixin_41741743/article/details/82814954\n教训:学习编程不要用中文版\n一: windows→preferences→java→editor→content assist→advanced→勾选Java Prolosals→选中Template Proposals→保存退出\n注意:发现重新打开会有丢失这一配置现象.\n二: windows→preferences→java→editor→content assist→Auto activation delay(ms)设置200→Auto activation triggers for Java设置.ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghigklmnopqrstuvwxya(注意前面的点不要丢)→保存退出\n三: windows →preferences→General→keys→Content asist→word completion快捷键删掉→Binding项改为“ALT+/”→When项选择成Editing Text→保存退出\n","date":"2019-12-21T00:00:00Z","permalink":"/p/eclipse-error/","title":"解决eclipse未自动补全问题的记录"},{"content":" 通过git int把目录变成Git可以管理的仓库。 所有的版本管理系统，其实只能跟踪文本文件的改动，比如txt、网页、程序代码等。 强烈建议使用标准的utf-8编码，不要用windows自带的记事本编辑任何文本，要用utf-8 without BOM。 一.创建版本库 1.1.创建空目录 1 2 3 mkdir 目录名 //新建目录 cd 目录名 pwd //显示当前目录路径 1.2.把目录变成Git可以管理的仓库 1 git init 会看到该目录下生成.git的目录\n1.3.把文件添加到仓库 1 git add \u0026lt;file\u0026gt; 可反复多次使用，添加多个文件\n1.4.把文件提交到仓库 1 git commit -m \u0026#34;xxx\u0026#34; -m \u0026ldquo;xxx\u0026quot;本次提交的说明，commit可以一次提交很多文件。\n二.时空穿梭 查看仓库当前状态\ngit status\n查看具体修改内容\ngit diff 要查看的文件\ndiff就是difference的缩写。\n2.1.版本回退 2.1.1.命令查看提交日志 1 git log 退出按 Q 觉得输出信息太多，可以加参数\n1 git log --pretty=oneline 一大串xxxxxxxxxxx是commin id（版本号）。HEAD是当前版本；HEAD^是上一版本；HEAD^^是上上版本；上100版本，用HEAD~100。 查看文件版本\n1 cat 文件 2.1.2.版本回退 用git reset\n1 git reset --hard HEAD^ 回退到上一版本。同时会修改工作区的文件。\n2.1.3取消版本回退 如果命令窗口还没关闭，往回拉，找到commit_id版本号：\n1 git reset --hard 版本号的前几位 如果命令窗口已经关了，查看命令历史，找到版本号：\n1 git reflog （ps：git base 按两下tab会有命令提示）\n2.2.工作区、暂存区和master分支 一旦提交后，如果你又没有对工作区做任何修改，那么工作区就是“干净”的：\n1 2 3 $ git status # On branch master nothing to commit (working directory clean) 1 git diff HEAD -- 文件名 //注意：在 -- 前面和后面都有空格。 可以查看工作区和版本库最新版的区别。\n2.3.撤销修改 2.3.1.工作区 1 git checkout -- file 暂存区已提交，就回到暂存区状态；未提交暂存区，就回到版本库的状态。 其中--很重要。\n2.3.2.暂存区 把暂存区撤销，放回工作区\n1 git reset HEAD file 然后把工作区撤销\n1 git checkout -- file 2.4.删除文件 删除本地文件\n1 rm file 删除版本库文件，并且提交\n1 2 3 git rm file git commit -m \u0026#34;xxx\u0026#34; 如果是删错了，恢复到版本库\n1 git checkout -- file git checkout实际上是用版本库替换工作区，无论是修改还是删除，都可以还原。\n三.远程仓库 创建ssh key\nssh-keygen -t rsa -C \u0026ldquo;youremail@example.com\u0026rdquo;\n测试ssh\n1 ssh -T git@github.com 3.1.添加远程库 关联本地仓库\ngit remote add origin git@github.com:example/example\n如果报错\n1 fatal：remote origin already exists 只要先删除，再添加：\n1 $ git remote rm origin 添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。\n把本地库的所有内容推送到远程库上：\ngit push -u origin master\n把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。\n由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。\n从现在起，只要本地作了提交，就可以通过命令：\n1 git push origin master 3.2.从远程库克隆\n1 git clone git@github.com:example/example 四.分支管理 4.1.创建与合并分支 通过指针的变化\n首先，我们创建dev分支，然后切换到dev分支：\ngit checkout -b dev\ngit checkout命令加上-b参数表示创建并切换，相当于以下两条命令：\n1 2 3 $ git branch dev $ git checkout dev Switched to branch \u0026#39;dev\u0026#39; 用git branch命令查看当前分支,当前分支前面会标一个*号：\n$ git branch\n*dev\nmaster\n分支的提交\n切换回主分支\ngit checkout master\n把dev分支的工作成果合并到master分支上：\ngit merge dev\ngit merge命令是合并指定分支到当前分支。\n删除dev分支\ngit branch -d dev\n因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。\n可以用git push origin :dev 删除远程分支dev。\n4.2.解决冲突 当两条分支对同一个文件的同一个文本块进行了不同的修改，并试图合并时，Git不能自动合并的，称之为冲突(conflict)。解决冲突需要人工处理。\ndev分支和master分支有不同提交\n这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突。\ngit status也可以告诉我们冲突的文件,\u0026laquo;\u0026laquo;\u0026laquo;\u0026lt;，=======，\u0026raquo;\u0026raquo;\u0026raquo;\u0026gt;标记出不同分支的内容。 对于简单的合并，手工编辑，然后去掉这些标记，最后像往常的提交一样先add再commit即可。\n用git log \u0026ndash;graph命令可以看到分支合并图 注意分支和分支并不是完完全全的平行.在切换分支前, 一定要在做出改动的分支将改动提交, 否则可能会将改动带到切换到的分支, 产生误会. 只要提前提交了, 改动就不会带过去。 其实多个分支是共用暂存区的，也就是说如果在分支1上仅add而不commit，实际暂存区中已经记录该次修改。哪怕后续切换到分支2上再进行commit也是有效的操作，只不过已经不是自己想要的处理。 合并如果没有冲突出现也就是自动合并成功, 则在当前分支中不需要add/commit提交合并后的内容, 因为实际上当前分支在合并成功后就指向了最近的commit(由做出改动的分支提交)。 4.3.分支管理策略 通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。\n如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。\n1 git merge --no-ff -m \u0026#34;描述\u0026#34; dev 因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。\n查看分支历史\n1 git log --graph --pretty=oneline --abbrev-commit 在实际开发中，应该按照几个基本原则进行分支管理：\nmaster分支应该是非常稳定的，仅用来发布新版本，平时不在上面干活；\ndev分支是不稳定的，发布版本时，把dev分支合并到master上，发布1.0版本。\n每个人都有自己的分支，时不时地往dev上合并。\n4.4.Bug分支 当前工作到一般还不能提交，但是又要修复bug添加bugfix分支，可以用stash存储工作状态。\n1 $ git stash 现在，用git status查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug。\n修完bug,回到原来分支，用git status list查看存储状态。用git stash apply恢复，git stash drop清空。或者用git stash pop一步完成。\n1 git stash pop 4.5.Feature分支 添加实验性功能时，不希望乱七八遭的代码把主分支打乱，最好添加feature分支，在上面开发，完成后合并、删除。\n4.6.多人协作 当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。\n要查看远程库的信息，用git remote：\n1 git remote 或者，用git remote -v显示更详细的信息：\n1 git remote -v 并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？\nmaster分支是主分支，因此要时刻与远程同步；\ndev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；\nbug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；\nfeature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。\n小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支：\n1 $ git checkout -b dev origin/dev 现在，他就可以在dev上继续修改，然后，时不时地把dev分支push到远程。\n小伙伴已经向origin/dev分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送，失败。\n小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送。\n1 git pull git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，先设置dev和origin/dev的链接，再pull：\n1 2 $ git branch --set-upstream dev origin/dev $ git pull 多人协作的工作模式通常是这样：\n首先，可以试图用git push origin branch-name推送自己的修改；\n如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；\n如果合并有冲突，则解决冲突，并在本地提交；\n没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！\n如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch \u0026ndash;set-upstream branch-name origin/branch-name。\n这就是多人协作的工作模式，一旦熟悉了，就非常简单。\n五.标签管理 tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。\n5.1.创建标签 切换到需要打标签的分支上：\n1 2 3 git branch git checkout master git tag v1.0 给master分支打上了v1.0的标签。\n查看所有标签：\n1 git tag 以前的commit忘记打标签了，需要找到commit id：\n1 git log --pretty=oneline --abbrev-commit 找到id比如是xxx\n打上标签\n1 git tag v0.9 xxx 注意，标签不是按时间顺序列出，而是按字母排序的。可以用git show 查看标签信息：\n1 git show v0.9 还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字\n1 git tag -a v0.1 -m \u0026#34;version 0.1 released\u0026#34; xxxid 用命令git show 可以看到说明文字：\n1 git show v0.1 还可以通过-s用私钥签名一个标签：\n1 git tag -s v0.2 -m \u0026#34;signed version 0.2 released\u0026#34; xxxid 签名采用PGP签名，因此，必须首先安装gpg（GnuPG），如果没有找到gpg，或者没有gpg密钥对，就会报错。\n5.2.操作标签 如果标签打错了要删除：\n1 git tag -d v0.1 因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。\n如果要推送某个标签到远程，使用命令git push origin ：\n1 git push origin v1.0 或者，一次性推送全部尚未推送到远程的本地标签：\n1 git push origin --tags 如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：\n1 git tag -d v0.9 然后，从远程删除。\n1 git push origin :refs/tags/v0.9 要看看是否真的从远程库删除了标签，可以登陆GitHub查看。\n","date":"2017-11-13T00:00:00Z","permalink":"/p/git-note/","title":"git笔记"},{"content":"用Github Page 搭免费博客 一.搭建hexo博客\n1.安装Node.js\n下载地址：传送门\n下载的文件是.msi后缀的，win10-x64-ltsb2016直接双击安装可能会出现2502、2503错误，在安装文件所在目录下，Shit+右键，在此处打开命令窗口，输入msiexec /i 文件名.msi ，就能成功安装。（如果还是无效，用管理员权限cmd）\n可以通过node -v命令来测试NodeJS是否安装成功。\n2.安装Git\n下载地址：传送门\n下载相应版本完成安装，可以通过git -version命令来测试git是否安装成功。\n3.注册Github账号\n准备好fq工具，注册时的usename用户名和邮箱很重要，因为默认的博客地址是https://usename.github.io/这种形式的，邮箱则关系到安全和通知。\n3.1添加SSH Key\nSSH Key是一个认证，让github识别绑定这台机器，允许这台机器提交。执行如下命令：\n1 cd ~/. ssh ~这个符号，表示在用户目录下 执行代码如果提示：No such file or directory 说明你是第一次使用git。\n新建新的SSH Key\n在Git Bash执行代码：\n1 ssh-keygen -t rsa -C \u0026#34;你的邮箱@gmail.com\u0026#34; 注意：此处的-C的是大写的。\n然后系统会要求你输入密码（密码在后面每次提交都需要输入，嫌麻烦可以直接两次回车不设置）：\n1 2 Enter passphrase (empty for no passphrase):\u0026lt;输入加密串\u0026gt; Enter same passphrase again:\u0026lt;再次输入加密串\u0026gt; 在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容。\n输入密码的时候没有 * 字样的，你直接输入就可以了。 邮箱输错/密码忘记， \u0026mdash;待完善 2020-02-22尝试迁移hexo到hugo\n","date":"2017-11-13T00:00:00Z","permalink":"/p/github-page-blog/","title":"用Github Page 搭免费博客"},{"content":"个人配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 { /** 减少卡顿 */ \u0026#34;git.ignoreMissingGitWarning\u0026#34;: true, \u0026#34;git.suggestSmartCommit\u0026#34;: false, \u0026#34;files.exclude\u0026#34;: { \u0026#34;**/.classpath\u0026#34;: true, \u0026#34;**/.factorypath\u0026#34;: true, \u0026#34;**/.project\u0026#34;: true, \u0026#34;**/.settings\u0026#34;: true, \u0026#34;**/node_modules/\u0026#34;: true, \u0026#34;dist\u0026#34;: true, \u0026#34;**/.git\u0026#34;: true, \u0026#34;**/.svn\u0026#34;: true, \u0026#34;**/.hg\u0026#34;: true, \u0026#34;**/CVS\u0026#34;: true, \u0026#34;**/.DS_Store\u0026#34;: true, \u0026#34;**/tmp\u0026#34;: true, \u0026#34;**/bower_components\u0026#34;: true, \u0026#34;**/dist\u0026#34;: true }, \u0026#34;files.watcherExclude\u0026#34;: { \u0026#34;**/.git/objects/**\u0026#34;: true, \u0026#34;**/.git/subtree-cache/**\u0026#34;: true, \u0026#34;**/node_modules/**\u0026#34;: true, \u0026#34;**/tmp/**\u0026#34;: true, \u0026#34;**/bower_components/**\u0026#34;: true, \u0026#34;**/dist/**\u0026#34;: true }, /** 编辑相关 */ \u0026#34;editor.formatOnSave\u0026#34;: false, //代码在保存的时候自动格式化 \u0026#34;editor.formatOnSaveMode\u0026#34;: \u0026#34;file\u0026#34;, // 设置保存文件时格式化整个文件还是仅被修改处。该配置项仅在 \u0026#34;editor.formatOnSave\u0026#34; 为 true时生效 \u0026#34;editor.formatOnType\u0026#34;: false, // 设置输入完成后是否自动格式化当前行 \u0026#34;editor.cursorStyle\u0026#34;: \u0026#34;line\u0026#34;, //光标样式 \u0026#34;editor.cursorWidth\u0026#34;: 2, // 光标宽度 \u0026#34;editor.fontFamily\u0026#34;: \u0026#34;Sarasa Mono SC Nerd,Sarasa Mono SC\u0026#34;, \u0026#34;editor.lineHeight\u0026#34;: 0, \u0026#34;editor.lineNumbers\u0026#34;: \u0026#34;on\u0026#34;, \u0026#34;editor.minimap.enabled\u0026#34;: false, \u0026#34;editor.rulers\u0026#34;: [100], //编辑器每行长度 \u0026#34;editor.suggestSelection\u0026#34;: \u0026#34;recentlyUsedByPrefix\u0026#34;, // 根据之前的预选 \u0026#34;editor.detectIndentation\u0026#34;: false, // vscode默认启用了根据文件类型自动设置tabsize的选项 \u0026#34;editor.tabSize\u0026#34;: 2, // 重新设定tabsize \u0026#34;editor.fontSize\u0026#34;: 16, \u0026#34;editor.wordWrap\u0026#34;: \u0026#34;bounded\u0026#34;, // 控制折行 \u0026#34;editor.wordWrapColumn\u0026#34;: 100, //显示换行 \u0026#34;editor.renderWhitespace\u0026#34;: \u0026#34;selection\u0026#34;, // 空白字符显示方式 \u0026#34;editor.guides.indentation\u0026#34;: true, // 控制编辑器是否应呈现缩进指南。 \u0026#34;editor.renderControlCharacters\u0026#34;: false, \u0026#34;editor.unicodeHighlight.invisibleCharacters\u0026#34;: false, // 控制是否突出显示仅保留空格或完全没有宽度的字符。 \u0026#34;editor.unicodeHighlight.ambiguousCharacters\u0026#34;: false, // 控制是否突出显示可能与基本 ASCII 字符混淆的字符，但当前用户区域设置中常见的字符除外。 \u0026#34;editor.wordSeparators\u0026#34;: \u0026#34;`~!@#$%^\u0026amp;*()=+[{]}\\\\|;:\u0026#39;\\\u0026#34;,.\u0026lt;\u0026gt;/?\u0026#34;, // 单词连字符 \u0026#34;editor.guides.bracketPairs\u0026#34;: \u0026#34;active\u0026#34;, // 控制是否启用括号对指南 \u0026#34;editor.quickSuggestions\u0026#34;: { //开启自动显示建议 \u0026#34;other\u0026#34;: true, \u0026#34;comments\u0026#34;: false, \u0026#34;strings\u0026#34;: true }, // \u0026#34;editor.tokenColorCustomizations\u0026#34;: { // // \u0026#34;comments\u0026#34;: \u0026#34;#008549\u0026#34; //注释 // // \u0026#34;keywords\u0026#34;: \u0026#34;#c41cbb\u0026#34;, // 关键字 // // \u0026#34;variables\u0026#34;: \u0026#34;#37bebe\u0026#34;, // 变量名 // // \u0026#34;strings\u0026#34;: \u0026#34;#222222\u0026#34;, // 字符串 // // \u0026#34;functions\u0026#34;: \u0026#34;#126bfafb\u0026#34;, // 函数名 // // \u0026#34;numbers\u0026#34;: \u0026#34;#f78400\u0026#34; // 数字 // }, \u0026#34;editor.accessibilitySupport\u0026#34;: \u0026#34;off\u0026#34;, // 针对屏幕阅读器进行优化的模式 /** 背景图相关 */ \u0026#34;background.enabled\u0026#34;: true, \u0026#34;background.useDefault\u0026#34;: false, \u0026#34;background.customImages\u0026#34;: [ \u0026#34;https://raw.githubusercontent.com/jqtmviyu/blogimagebed/images/images/20210319174159.png\u0026#34; ], \u0026#34;background.styles\u0026#34;: [ { \u0026#34;content\u0026#34;: \u0026#34;\u0026#39;\u0026#39;\u0026#34;, \u0026#34;pointer-events\u0026#34;: \u0026#34;none\u0026#34;, \u0026#34;position\u0026#34;: \u0026#34;absolute\u0026#34;, \u0026#34;right\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;bottom\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;z-index\u0026#34;: \u0026#34;99999\u0026#34;, \u0026#34;width\u0026#34;: \u0026#34;120px\u0026#34;, \u0026#34;background-size\u0026#34;: \u0026#34;100% auto\u0026#34;, \u0026#34;background-position\u0026#34;: \u0026#34;100% 100%\u0026#34;, \u0026#34;background-repeat\u0026#34;: \u0026#34;no-repeat\u0026#34;, \u0026#34;opacity\u0026#34;: 1 } ], \u0026#34;background.useFront\u0026#34;: true, /** 主题外观 */ \u0026#34;workbench.colorTheme\u0026#34;: \u0026#34;Quiet Light\u0026#34;, \u0026#34;workbench.iconTheme\u0026#34;: \u0026#34;material-icon-theme\u0026#34;, \u0026#34;workbench.startupEditor\u0026#34;: \u0026#34;newUntitledFile\u0026#34;, \u0026#34;workbench.editorAssociations\u0026#34;: { \u0026#34;*.md\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;*.svg\u0026#34;: \u0026#34;default\u0026#34; }, \u0026#34;workbench.colorCustomizations\u0026#34;: { \u0026#34;editorBracketHighlight.foreground1\u0026#34;: \u0026#34;#ffd700\u0026#34;, \u0026#34;editorBracketHighlight.foreground2\u0026#34;: \u0026#34;#da70d6\u0026#34;, \u0026#34;editorBracketHighlight.foreground3\u0026#34;: \u0026#34;#179fff\u0026#34;, \u0026#34;editorBracketHighlight.foreground4\u0026#34;: \u0026#34;#24d600\u0026#34;, \u0026#34;editorBracketHighlight.foreground5\u0026#34;: \u0026#34;#00d8d8\u0026#34;, \u0026#34;editorBracketHighlight.foreground6\u0026#34;: \u0026#34;#ee0255\u0026#34;, \u0026#34;editorBracketHighlight.unexpectedBracket.foreground\u0026#34;: \u0026#34;#ff0000\u0026#34;, \u0026#34;editor.selectionBackground\u0026#34;: \u0026#34;#67769697\u0026#34;, // 选中区域颜色 \u0026#34;editor.selectionHighlightBackground\u0026#34;: \u0026#34;#ffffff10\u0026#34;, // 与选区内容相同的颜色 \u0026#34;editor.selectionHighlightBorder\u0026#34;: \u0026#34;#67769697\u0026#34; // 与选区内容相同的边框颜色, }, \u0026#34;workbench.editor.wrapTabs\u0026#34;: false, \u0026#34;breadcrumbs.enabled\u0026#34;: true, /** 终端设置 */ \u0026#34;terminal.integrated.profiles.osx\u0026#34;: { \u0026#34;zsh\u0026#34;: { \u0026#34;path\u0026#34;: \u0026#34;/bin/zsh\u0026#34; } }, \u0026#34;terminal.integrated.defaultProfile.osx\u0026#34;: \u0026#34;zsh\u0026#34;, \u0026#34;terminal.integrated.fontFamily\u0026#34;: \u0026#34;Sarasa Mono SC Nerd,Sarasa Mono SC\u0026#34;, \u0026#34;terminal.integrated.fontSize\u0026#34;: 12, \u0026#34;terminal.integrated.profiles.windows\u0026#34;: { \u0026#34;git-bash\u0026#34;: { \u0026#34;path\u0026#34;: \u0026#34;C:\\\\Program Files (x86)\\\\Git\\\\bin\\\\bash.exe\u0026#34; } }, \u0026#34;terminal.integrated.cursorStyle\u0026#34;: \u0026#34;line\u0026#34;, \u0026#34;terminal.integrated.cursorBlinking\u0026#34;: true, // 终端光标闪烁 /** 更新相关 */ \u0026#34;update.mode\u0026#34;: \u0026#34;none\u0026#34;, \u0026#34;update.showReleaseNotes\u0026#34;: false, \u0026#34;telemetry.telemetryLevel\u0026#34;: \u0026#34;off\u0026#34;, //不发送报告 \u0026#34;extensions.autoUpdate\u0026#34;: false, /** html 标签自动补全 */ \u0026#34;emmet.triggerExpansionOnTab\u0026#34;: true, // 启用后，按下TAB键，将展开Emmet缩写 \u0026#34;emmet.syntaxProfiles\u0026#34;: { \u0026#34;vue-html\u0026#34;: \u0026#34;html\u0026#34;, \u0026#34;vue\u0026#34;: \u0026#34;html\u0026#34; }, \u0026#34;emmet.includeLanguages\u0026#34;: { \u0026#34;vue-html\u0026#34;: \u0026#34;html\u0026#34;, \u0026#34;vue\u0026#34;: \u0026#34;html\u0026#34;, \u0026#34;javascript\u0026#34;: \u0026#34;javascriptreact\u0026#34; }, /** js代码格式化 */ \u0026#34;javascript.format.enable\u0026#34;: false, \u0026#34;javascript.preferences.quoteStyle\u0026#34;: \u0026#34;single\u0026#34;, // js設置单引号 \u0026#34;javascript.format.insertSpaceBeforeFunctionParenthesis\u0026#34;: true, //函数参数前的括号处理方式 /** prettier */ \u0026#34;prettier.requireConfig\u0026#34;: false, //需要一个“prettierconfig”来格式化prettier // \u0026#34;prettier.disableLanguages\u0026#34;: [\u0026#34;vue\u0026#34;], // 不格式化vue文件，vue文件的格式化单独设置 \u0026#34;prettier.printWidth\u0026#34;: 100, // 设置prettier单行输出（不折行）的（最大）长度 \u0026#34;prettier.proseWrap\u0026#34;: \u0026#34;preserve\u0026#34;, // 使用默认的折行标准 \u0026#34;prettier.tabWidth\u0026#34;: 2, // 设置工具每一个水平缩进的空格数 \u0026#34;prettier.endOfLine\u0026#34;: \u0026#34;auto\u0026#34;, // 结尾是 \\n \\r \\n\\r auto \u0026#34;prettier.useTabs\u0026#34;: false, // 使用tab（制表位）缩进而非空格 \u0026#34;prettier.semi\u0026#34;: false, // 在语句末尾添加分号 \u0026#34;prettier.singleQuote\u0026#34;: true, // 使用单引号而非双引号 \u0026#34;prettier.quoteProps\u0026#34;: \u0026#34;as-needed\u0026#34;, // 对象的 key 仅在必要时用引号 \u0026#34;prettier.trailingComma\u0026#34;: \u0026#34;es5\u0026#34;, // 在对象或数组最后一个元素后面是否加逗号 \u0026#34;prettier.bracketSpacing\u0026#34;: true, // 为单行箭头函数的参数添加圆括号，参数个数为1时可以省略圆括号 \u0026#34;prettier.bracketSameLine\u0026#34;: true, // 在多行JSX元素最后一行的末尾添加 \u0026gt; 而使 \u0026gt; 单独一行（不适用于自闭和元素) \u0026#34;prettier.arrowParens\u0026#34;: \u0026#34;avoid\u0026#34;, // 箭头函数参数两边加上括号 /** */ \u0026#34;html.format.indentHandlebars\u0026#34;: true, //对 {{#foo}} 和 {{/foo}} 进行格式化与缩进。 /** vue */ \u0026#34;[vue]\u0026#34;: { // 指定 *.vue 文件的格式化工具为vetur // { \u0026#34;editor.defaultFormatter\u0026#34;: \u0026#34;octref.vetur\u0026#34; }, // \u0026#34;editor.defaultFormatter\u0026#34;: \u0026#34;johnsoncodehk.volar\u0026#34; }, /** vetur */ \u0026#34;vetur.format.defaultFormatter.html\u0026#34;: \u0026#34;js-beautify-html\u0026#34;, //prettier不能格式化template \u0026#34;vetur.format.defaultFormatter.js\u0026#34;: \u0026#34;prettier\u0026#34;, //让vue中的js按编辑器自带的ts格式进行格式化 \u0026#34;vetur.format.defaultFormatter.css\u0026#34;: \u0026#34;prettier\u0026#34;, \u0026#34;vetur.format.defaultFormatter.less\u0026#34;: \u0026#34;prettier\u0026#34;, \u0026#34;vetur.format.defaultFormatter.scss\u0026#34;: \u0026#34;prettier\u0026#34;, \u0026#34;vetur.format.defaultFormatter.stylus\u0026#34;: \u0026#34;stylus-supremacy\u0026#34;, \u0026#34;vetur.format.defaultFormatter.sass\u0026#34;: \u0026#34;sass-formatter\u0026#34;, \u0026#34;vetur.format.defaultFormatter.postcss\u0026#34;: \u0026#34;prettier\u0026#34;, \u0026#34;vetur.format.defaultFormatter.ts\u0026#34;: \u0026#34;prettier\u0026#34;, \u0026#34;vetur.format.defaultFormatterOptions\u0026#34;: { \u0026#34;js-beautify-html\u0026#34;: { \u0026#34;wrap_line_length\u0026#34;: 0, \u0026#34;wrap_attributes\u0026#34;: \u0026#34;auto\u0026#34;, // 属性强制折行对齐 \u0026#34;end_with_newline\u0026#34;: false }, \u0026#34;prettier\u0026#34;: { \u0026#34;printWidth\u0026#34;: 100, \u0026#34;proseWrap\u0026#34;: \u0026#34;preserve\u0026#34;, \u0026#34;tabWidth\u0026#34;: 2, \u0026#34;useTabs\u0026#34;: false, \u0026#34;endOfLine\u0026#34;: \u0026#34;auto\u0026#34;, \u0026#34;semi\u0026#34;: false, // 去掉代码结尾的分号 \u0026#34;singleQuote\u0026#34;: true, // 使用单引号替代双引号 \u0026#34;quoteProps\u0026#34;: \u0026#34;as-needed\u0026#34;, \u0026#34;trailingComma\u0026#34;: \u0026#34;es5\u0026#34;, // 多行时，尽可能打印尾随的逗号 \u0026#34;arrowParens\u0026#34;: \u0026#34;avoid\u0026#34;, //是否使用尾逗号 \u0026#34;bracketSpacing\u0026#34;: true //对象大括号直接是否有空格 } }, \u0026#34;vetur.validation.interpolation\u0026#34;: false, // \u0026#34;vetur.experimental.templateInterpolationService\u0026#34;: true, // template 中自动补全 ts 语法设置的属性 // \u0026#34;vetur.format.options.useTabs\u0026#34;: false, // \u0026#34;vetur.format.options.tabSize\u0026#34;: 2, // \u0026#34;vetur.format.scriptInitialIndent\u0026#34;: true, // \u0026#34;vetur.format.styleInitialIndent\u0026#34;: true, // \u0026#34;vetur.validation.template\u0026#34;: false, //不使用esLint-Plugin-vue校验template /** */ \u0026#34;better-comments.multilineComments\u0026#34;: true, \u0026#34;better-comments.highlightPlainText\u0026#34;: true, /** eslint配置 */ \u0026#34;eslint.alwaysShowStatus\u0026#34;: true, // 设置状态栏是否一直显示ESlint图标项，true表示一直显示 \u0026#34;editor.codeActionsOnSave\u0026#34;: { \u0026#34;source.fixAll.eslint\u0026#34;: false }, \u0026#34;eslint.options\u0026#34;: { \u0026#34;extensions\u0026#34;: [\u0026#34;.js\u0026#34;, \u0026#34;.vue\u0026#34;, \u0026#34;.jsx\u0026#34;, \u0026#34;.tsx\u0026#34;] }, \u0026#34;eslint.codeAction.showDocumentation\u0026#34;: { \u0026#34;enable\u0026#34;: true }, \u0026#34;eslint.run\u0026#34;: \u0026#34;onType\u0026#34;, /** 标签增强*/ \u0026#34;better-comments.tags\u0026#34;: [ { \u0026#34;tag\u0026#34;: \u0026#34;!\u0026#34;, \u0026#34;color\u0026#34;: \u0026#34;#FF2D00\u0026#34;, \u0026#34;strikethrough\u0026#34;: false, \u0026#34;underline\u0026#34;: false, \u0026#34;backgroundColor\u0026#34;: \u0026#34;transparent\u0026#34;, \u0026#34;bold\u0026#34;: false, \u0026#34;italic\u0026#34;: false }, { \u0026#34;tag\u0026#34;: \u0026#34;?\u0026#34;, \u0026#34;color\u0026#34;: \u0026#34;#3498DB\u0026#34;, \u0026#34;strikethrough\u0026#34;: false, \u0026#34;underline\u0026#34;: false, \u0026#34;backgroundColor\u0026#34;: \u0026#34;transparent\u0026#34;, \u0026#34;bold\u0026#34;: false, \u0026#34;italic\u0026#34;: false }, { \u0026#34;tag\u0026#34;: \u0026#34;todo\u0026#34;, \u0026#34;color\u0026#34;: \u0026#34;#FF8C00\u0026#34;, \u0026#34;strikethrough\u0026#34;: false, \u0026#34;underline\u0026#34;: false, \u0026#34;backgroundColor\u0026#34;: \u0026#34;transparent\u0026#34;, \u0026#34;bold\u0026#34;: false, \u0026#34;italic\u0026#34;: false } ], \u0026#34;javascript.updateImportsOnFileMove.enabled\u0026#34;: \u0026#34;always\u0026#34;, // 在 VS Code 中重命名或移动文件时启用/禁用导入路径的自动更新。 \u0026#34;leetcode.endpoint\u0026#34;: \u0026#34;leetcode-cn\u0026#34;, \u0026#34;leetcode.workspaceFolder\u0026#34;: \u0026#34;/Users/nuc/.leetcode\u0026#34;, \u0026#34;leetcode.defaultLanguage\u0026#34;: \u0026#34;javascript\u0026#34;, \u0026#34;remote.SSH.useLocalServer\u0026#34;: false, \u0026#34;remote.SSH.connectTimeout\u0026#34;: 30, \u0026#34;remote.SSH.remotePlatform\u0026#34;: { \u0026#34;192.168.168.3\u0026#34;: \u0026#34;macOS\u0026#34;, \u0026#34;192.168.1.3\u0026#34;: \u0026#34;macOS\u0026#34; }, /** vim配置 */ // \u0026#34;vim.incsearch\u0026#34;: true, // 输入搜索时显示下一个匹配项 // \u0026#34;vim.useSystemClipboard\u0026#34;: true, // 使用系统的剪切板 // \u0026#34;vim.useCtrlKeys\u0026#34;: true, // 由vim接管ctrl+any的按键，而不是vscode // \u0026#34;vim.hlsearch\u0026#34;: true, // 突出显示与当前搜索匹配的所有文本 // \u0026#34;vim.easymotion\u0026#34;: true, // \u0026#34;vim.leader\u0026#34;: \u0026#34;\u0026lt;space\u0026gt;\u0026#34;, // 绑定vim前导键 // \u0026#34;vim.insertModeKeyBindings\u0026#34;: [// 插入模式下的非递归按键绑定 // { // \u0026#34;before\u0026#34;: [\u0026#34;j\u0026#34;, \u0026#34;j\u0026#34;], // \u0026#34;after\u0026#34;: [\u0026#34;\u0026lt;Esc\u0026gt;\u0026#34;] // } // ], // \u0026#34;vim.normalModeKeyBindingsNonRecursive\u0026#34;: [ // 普通模式下的非递归按键绑定 // { // \u0026#34;before\u0026#34;: [\u0026#34;\u0026lt;leader\u0026gt;\u0026#34;, \u0026#34;d\u0026#34;], // \u0026#34;after\u0026#34;: [\u0026#34;d\u0026#34;, \u0026#34;d\u0026#34;] // }, // { // \u0026#34;before\u0026#34;: [\u0026#34;\u0026lt;C-n\u0026gt;\u0026#34;], // \u0026#34;commands\u0026#34;: [\u0026#34;:nohl\u0026#34;] // 取消高亮搜索 // }, // { // \u0026#34;before\u0026#34;: [\u0026#34;K\u0026#34;], // \u0026#34;commands\u0026#34;: [\u0026#34;lineBreakInsert\u0026#34;], // \u0026#34;silent\u0026#34;: true // }, // { // 光标跳转到终端 用ctrl+`就好了,留下作为调用vscode快捷键的例子 // \u0026#34;before\u0026#34;: [\u0026#34;\u0026lt;leader\u0026gt;\u0026#34;, \u0026#34;t\u0026#34;], // \u0026#34;commands\u0026#34;: [\u0026#34;workbench.action.terminal.focus\u0026#34;], // } // ], // \u0026#34;vim.handleKeys\u0026#34;: { // 取消vim的按键映射,交给vscode管理 // \u0026#34;\u0026lt;C-a\u0026gt;\u0026#34;: false, // \u0026#34;\u0026lt;C-f\u0026gt;\u0026#34;: false, // \u0026#34;\u0026lt;C-n\u0026gt;\u0026#34;: false, // }, // vim插件自动切换输入法 // \u0026#34;vim.autoSwitchInputMethod.enable\u0026#34;: true, // \u0026#34;vim.autoSwitchInputMethod.defaultIM\u0026#34;: \u0026#34;com.apple.keylayout.ABC\u0026#34;, // \u0026#34;vim.autoSwitchInputMethod.obtainIMCmd\u0026#34;: \u0026#34;/usr/local/bin/im-select\u0026#34;, // \u0026#34;vim.autoSwitchInputMethod.switchIMCmd\u0026#34;: \u0026#34;/usr/local/bin/im-select {im}\u0026#34;, \u0026#34;pasteImage.basePath\u0026#34;: \u0026#34;${currentFileDir}/${currentFileNameWithoutExt}.assets\u0026#34;, // 图片插件 \u0026#34;window.zoomLevel\u0026#34;: 1, \u0026#34;markdown-preview-enhanced.previewTheme\u0026#34;: \u0026#34;vue.css\u0026#34;, // markdown渲染主题 \u0026#34;markdown-preview-enhanced.automaticallyShowPreviewOfMarkdownBeingEdited\u0026#34;: true, \u0026#34;gitlens.hovers.enabled\u0026#34;: false, \u0026#34;diffEditor.ignoreTrimWhitespace\u0026#34;: false, // \u0026#34;npm.scriptExplorerAction\u0026#34;: \u0026#34;run\u0026#34;, // \u0026#34;liveServer.settings.donotVerifyTags\u0026#34;: true, // \u0026#34;cssrem.rootFontSize\u0026#34;: 24, \u0026#34;security.workspace.trust.enabled\u0026#34;: false, // 工作区信任 } 常用插件 @enabled (推荐) auto close tag: 自动关闭标签 (推荐) auto complete tag: 自动补全标签 *background*: 右下角小背景图 (推荐) better comments: 注释实现不同颜色 (推荐) color highlight dotenv draw.io integration: 流程图 (推荐) error lens: 在代码中显示错误 es7 react/redux/graphql: react插件 eslint: 语法检查插件 (推荐) git graph: mac上不支持vscode 1.74版本,1.70可用 (推荐) gitlens: mac上graph功能1.74版本同样会导致内存溢出 html css support: html css插件 html snippets: html代码提示 (推荐) markdown preview enhanced: markdown预览, 支持主题和大纲 meterial icon theme: 图标主题 (推荐) open: 用系统默认程序打开文件 open in browser: 用浏览器打开 paste image: 像typora一样设置图片保存地址 (推荐) path intellisense: 路径自动补全 prettier: 代码格式化 (推荐) project manager: 项目管理 reactjs code snippets: react插件 sublime text keymap: sublime热键 svg preview: svg预览 toml language support: toml语法高亮支持 vetur: vue插件 vscode react refactor: react插件 vscode-mindmap: 脑图插件(兼容百度脑图) @disabled code spell checker code metrics css tree css-atuo-prefix easy less easy wxless editorconfig for vs code git-log--graph github copilot html to jsx i18n ally iconify Iintellisense import cost jquery code snipets live server m3u remote - ssh remote - ssh:editing configuration files remote explorer stylelint typescript vue plugin(volar) vim vue 3 snippets vue language features(volar) ","date":"2017-11-08T00:00:00Z","permalink":"/p/vscode-setting/","title":"vscode个人配置"}]