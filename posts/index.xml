<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Jqtmviyu's Blog</title><link>/posts/</link><description>Recent content in Posts on Jqtmviyu's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 28 Feb 2020 00:00:00 +0000</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>使用netlify部署hugo注意事项</title><link>/posts/202002/28.netlify-and-hugo/</link><pubDate>Fri, 28 Feb 2020 00:00:00 +0000</pubDate><guid>/posts/202002/28.netlify-and-hugo/</guid><description>登录Nextlify，用github账号授权登陆即可。 选择 “New site from Git”——“Github”——选择自己hugo博客源码对应的仓库——自动部署。 注：可以选择私人仓库，并且public可以配置.gitignore不用上传。 遇到的报错：
Production: master@HEAD Failed failed during stage &amp;#39;building site&amp;#39;: Build script returned non-zero exit code: 255 遇事不觉谷人希，stackoverflow上找到类似答案，需要修改Netlify控制台的环境变量与实际Hugo版本一致。 官方说明
技术问题千万别用百度，垃圾csdn。
“setting”——“Build&amp;amp;deploy”——“Environment”——&amp;quot;Environment variables&amp;quot;——“Edit variables”，左边填“HUGO_VERSION”，右边填“v0.65.3”。
注：版本号以实际hugo version获取为准。
同时搜索到另一种解决方法，但未实际验证。 在网站根目录下新建netlify.toml的文件。
[build] publish = &amp;#34;public&amp;#34; command = &amp;#34;hugo --gc --minify&amp;#34; [context.production.environment] HUGO_VERSION = &amp;#34;0.65.3&amp;#34; HUGO_ENV = &amp;#34;production&amp;#34; HUGO_ENABLEGITINFO = &amp;#34;true&amp;#34; [context.split1] command = &amp;#34;hugo --gc --minify --enableGitInfo&amp;#34; [context.split1.environment] HUGO_VERSION = &amp;#34;0.65.3&amp;#34; HUGO_ENV = &amp;#34;production&amp;#34; [context.</description></item><item><title>git删除所有历史提交记录</title><link>/posts/202002/27.delete-all-gitcommit/</link><pubDate>Thu, 27 Feb 2020 00:00:00 +0000</pubDate><guid>/posts/202002/27.delete-all-gitcommit/</guid><description>​ 在切换Hexo到Hugo的过程中，由于有很多误操作造成提交记录很难看，需要清空历史提交记录。
切换到新的分支。
git checkout --orphan latest_branch 缓存所有的文件（除了.gitignore中声明排除的）
git add -A 提交跟踪过的文件。
git commit -m &amp;#34;提交记录&amp;#34; 删除master分支。
git branch -D master 重命名当前分支为master。
git branch -m master 提交到远程master分支。
git push -f origin master</description></item><item><title>解决eclipse未自动补全问题的记录</title><link>/posts/201912/21.eclipse-error/</link><pubDate>Sat, 21 Dec 2019 00:00:00 +0000</pubDate><guid>/posts/201912/21.eclipse-error/</guid><description>参考方法:https://blog.csdn.net/weixin_41741743/article/details/82814954
教训:学习编程不要用中文版
一: windows→preferences→java→editor→content assist→advanced→勾选Java Prolosals→选中Template Proposals→保存退出
注意:发现重新打开会有丢失这一配置现象.
二: windows→preferences→java→editor→content assist→Auto activation delay(ms)设置200→Auto activation triggers for Java设置.ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghigklmnopqrstuvwxya(注意前面的点不要丢)→保存退出
三: windows →preferences→General→keys→Content asist→word completion快捷键删掉→Binding项改为“ALT+/”→When项选择成Editing Text→保存退出</description></item><item><title>git笔记</title><link>/posts/201711/13.git-note/</link><pubDate>Mon, 13 Nov 2017 00:00:00 +0000</pubDate><guid>/posts/201711/13.git-note/</guid><description>通过git int把目录变成Git可以管理的仓库。 所有的版本管理系统，其实只能跟踪文本文件的改动，比如txt、网页、程序代码等。 强烈建议使用标准的utf-8编码，不要用windows自带的记事本编辑任何文本，要用utf-8 without BOM。 一.创建版本库 1.1.创建空目录 mkdir 目录名 //新建目录 cd 目录名 pwd //显示当前目录路径 1.2.把目录变成Git可以管理的仓库 git init 会看到该目录下生成.git的目录
1.3.把文件添加到仓库 git add &amp;lt;file&amp;gt; 可反复多次使用，添加多个文件
1.4.把文件提交到仓库 git commit -m &amp;#34;xxx&amp;#34; -m &amp;ldquo;xxx&amp;quot;本次提交的说明，commit可以一次提交很多文件。
二.时空穿梭 查看仓库当前状态
git status
查看具体修改内容
git diff 要查看的文件
diff就是difference的缩写。
2.1.版本回退 2.1.1.命令查看提交日志 git log 退出按 Q 觉得输出信息太多，可以加参数
git log --pretty=oneline 一大串xxxxxxxxxxx是commin id（版本号）。HEAD是当前版本；HEAD^是上一版本；HEAD^^是上上版本；上100版本，用HEAD~100。 查看文件版本
cat 文件 2.1.2.版本回退 用git reset
git reset --hard HEAD^ 回退到上一版本。同时会修改工作区的文件。</description></item><item><title>用Github Page 搭免费博客</title><link>/posts/201711/13.github-page-blog/</link><pubDate>Mon, 13 Nov 2017 00:00:00 +0000</pubDate><guid>/posts/201711/13.github-page-blog/</guid><description>用Github Page 搭免费博客 一.搭建hexo博客
1.安装Node.js
下载地址：传送门
下载的文件是.msi后缀的，win10-x64-ltsb2016直接双击安装可能会出现2502、2503错误，在安装文件所在目录下，Shit+右键，在此处打开命令窗口，输入msiexec /i 文件名.msi ，就能成功安装。（如果还是无效，用管理员权限cmd）
可以通过node -v命令来测试NodeJS是否安装成功。
2.安装Git
下载地址：传送门
下载相应版本完成安装，可以通过git -version命令来测试git是否安装成功。
3.注册Github账号
准备好fq工具，注册时的usename用户名和邮箱很重要，因为默认的博客地址是https://usename.github.io/这种形式的，邮箱则关系到安全和通知。
3.1添加SSH Key
SSH Key是一个认证，让github识别绑定这台机器，允许这台机器提交。执行如下命令：
cd ~/. ssh ~这个符号，表示在用户目录下 执行代码如果提示：No such file or directory 说明你是第一次使用git。
新建新的SSH Key
在Git Bash执行代码：
ssh-keygen -t rsa -C &amp;#34;你的邮箱@gmail.com&amp;#34; 注意：此处的-C的是大写的。
然后系统会要求你输入密码（密码在后面每次提交都需要输入，嫌麻烦可以直接两次回车不设置）：
Enter passphrase (empty for no passphrase):&amp;lt;输入加密串&amp;gt; Enter same passphrase again:&amp;lt;再次输入加密串&amp;gt; 在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容。
输入密码的时候没有 * 字样的，你直接输入就可以了。 邮箱输错/密码忘记， &amp;mdash;待完善 2020-02-22尝试迁移hexo到hugo</description></item><item><title>vscode使用笔记</title><link>/posts/201711/08.vscode-setting/</link><pubDate>Wed, 08 Nov 2017 00:00:00 +0000</pubDate><guid>/posts/201711/08.vscode-setting/</guid><description>1.背景图 用户设置：
// 背景图 &amp;quot;background.useDefault&amp;quot;: false, &amp;quot;background.customImages&amp;quot;: [ &amp;quot;file:///D:/Pictures/头图/1.png&amp;quot;, &amp;quot;file:///D:/Pictures/头图/2.png&amp;quot;, &amp;quot;file:///D:/Pictures/头图/3.png&amp;quot;] 图片整体大小用ps调整就可以了。</description></item><item><title>Markdown笔记</title><link>/posts/201710/30.markdown-note/</link><pubDate>Mon, 30 Oct 2017 00:00:00 +0000</pubDate><guid>/posts/201710/30.markdown-note/</guid><description>&amp;lt;span id=&amp;ldquo;jump&amp;gt;锚点 1.标题 # 一级标题&amp;lt;h1&amp;gt; ## 二级标题&amp;lt;h2&amp;gt; ### 三级标题〈h3&amp;gt; #### 四级标题&amp;lt;h4&amp;gt; ##### 五级标题&amp;lt;h5&amp;gt; 2.强调 *斜体的文字* _斜体的文字_ 斜体的文字
**粗体的文字** __粗体的文字__ 粗体的文字
*** 加粗斜体的文字*** 加粗斜体的文字
~~删除线的文字~~ 删除线的文字
这些~~符号~~*可以***组合** 这些符号可以组合
3.超链接 Markdown 支持两种形式的链接语法： 行内式和参考式两种形式，行内式一般使用较多。
3.1.行内式 [链接文字]（链接地址 &amp;#34;title可选&amp;#34;） ​ 例:
[GitHub](http://github.com) [GitHub](http://github.com &amp;#34;这就是个提示&amp;#34;) 例: GitHub GitHub
（ps:段首加空格，shift+space切换到全角，直接加空格）
3.2.参考式 参考式多用在学术论文上，或者在文章中多处使用相同链接。
​ [链接文字][链接标记] ​ [链接标记]:链接地址 &amp;#34;链接标题&amp;#34; 任意地方添加 如果链接文字可以当链接标记:
​[链接文字][] [链接文字]: 链接文字 ​链接文字
​ 例:[Github][1]、[Google][2]、[知乎][]是我经常去的网站。 [1]: http://github.com [2]: http://www.google.com [知乎]: https://www.zhihu.com/ 例:Github、Google、知乎是我经常去的网站。
3.3.自动短链接 ​ &amp;lt;http://example.com/&amp;gt; ​ &amp;lt;address@example.</description></item></channel></rss>